// Serverside map config file, if you want to use a diffrent map change these variables
--
DISABLED_SCPS = {
	"178",
	"1048",
	"082",
	"2845",
	"681",
	"160"
}
local POINT_RAISE = Vector(0, 0, 30)
local POINT_LOWER = Vector(0, 0, -30)
GUN_RAISE_CONSTANT = Vector(0,0,25)

SPAWN_SCP1025 = Vector(1793.476563, -1663.771973, 133.940491)
SPAWN_SCP1025_ANGLE = Angle(0.291, -148.151, 0.698)

--Spawn for 173
SPAWN_173 = Vector(1754.3431396484, -4286.66015625, -114.46875)
--Spawn for 106
SPAWN_106 = Vector(2139.111328125, 2417.1918945313, -2064.46875)
--Spawn for 049
SPAWN_049 = Vector(4300.6064453125, -38.760734558105, -1624.46875)
--Spawn for 457
SPAWN_457 = Vector(501.00677490234, 217.73460388184, -1616.46875)
--Spawn for 966
--SPAWN_966 = Vector(4420.794922, 2361.706787, 30.290451)
--Spawn for 939
SPAWN_939 = Vector(59.228706359863, 2313.7326660156, -1728.1240234375)
--Spawn for 682
SPAWN_682 = Vector(-1693.5720214844, 756.83636474609, -1999.46875)
--Spawn for 096, currently used by 966
SPAWN_096 = Vector(4922.318359375, 1831.640625, -1616.46875)
--Spawn for 035, if possible near D Class
SPAWN_035 = Vector(-2035.408203125, -706.92657470703, -1617.46875)
--Spawn for 1048A, although on the default map he's near able, try finding a different spawn
SPAWN_1048A = Vector(3290.3447265625, 2362.5517578125, -1616.46875)
--Spawn for 066, aka the mistake scp
SPAWN_066 = SPAWN_1048A
--Spawn for 076-02
SPAWN_0762 = Vector(-273.92895507813, -145.82723999023, -1616.46875)
--966 using 096, comment this out if they're not going to spawn in the same spot
SPAWN_966 = Vector(1610.708984375, 917.78912353516, -1616.46875)
--178's spawn
SPAWN_178_1 = Vector(3904.939453, -1305.773438, -113.604263)
SPAWN_178 = Vector(140.607956, -191.011459, 65.690697)
--I WONDER WHAT THE FUCK THIS IS FOR
SPAWN_INTERCOM = Vector(-826.142822, -756.750916, 583.561218)
--914's entrance booth
ENTER914 = Vector(0, 0, 0)
--914's output
EXIR914 = Vector(0, 0, 0)
--Where the bell would spawn, if it were ever added
POS_513 = Vector(0, 0, 0)
--This is the trigger, the thing that starts the machine
POS_914BUTTON = Vector(0,0, 0)
--This is the mode selector
POS_914B_BUTTON = Vector(0, 0, 0)
--This is where the vending machine should spawn
SPAWN_SCP_294 = Vector(3702.441650, -2422.304443, 30.773510)
SPAWN_SCP_294_ANG = Angle(0,270,0)
SPAWN_1162 = Vector(930.33428955078, -4479.2963867188, -622.01110839844)
SPAWN_1048B = Vector(3355.1889648438, 2272.5620117188, -1616.46875)
SPAWN_372 = Vector(3377.677734, -3411.841309, -556.957581)
--This is where the surface music starts, this is going to be updated soon, but maybe not
OUTSIDESOUNDS = Vector(-1202.9288330078, -1894.1086425781, 672.53125)
--Spawn for SCP-1425
SPAWN_SCP1425 = Vector(2328.116943, -3179.168701, -553.121704)
SPAWN_SCP1425_ANGLE = Angle(0, 0, 0)
--Spawn for SCP-127
SPAWN_SCP127 = {
Vector(2667.201660, -1345.199463, 148.531250)+POINT_RAISE
}

--Spawn for SCP-512
SPAWN_SCP512 = {
 Vector(884.938599, -1624.416748, -1552.468750)+POINT_RAISE
}

--Spawn for SCP-668
SPAWN_SCP668 = {
 Vector(1509.214478, -4153.091797, 593.531250)+POINT_RAISE
}

--Spawn for SCP-268
SPAWN_SCP268 = {
 Vector(1509.214478, -4153.091797, 593.531250)+POINT_RAISE
}

SPAWN_CLASSE = {
	Vector(2699.408203, 1572.131958, -1552.468750)+POINT_LOWER,
	Vector(1377.670166, 4598.493652, -1552.468750),
	Vector(953.443176, 4779.250000, -1551.945435),
	Vector(979.516907, 4529.860840, -1552.886475),
	Vector(1216.820190, 4538.767090, -1553.430420),
	Vector(1453.078857, 4806.805664, -1551.776123),
	Vector(906.805359, 4458.802734, -1553.467651),
	Vector(902.076294, 4607.677734, -1551.821533),
	Vector(1151.170654, 4423.651367, -1553.412842),
	Vector(1440.868286, 4466.951172, -1551.686523),
	Vector(1387.168701, 4799.772461, -1552.875122)
}
--A table containing all the D Class spawns
SPAWN_CLASSD = {
	Vector(2473.6560058594, -2423.1086425781, 84.53125),
	Vector(2722.162109375, -2460.3659667969, 84.53125),
	Vector(2729.9130859375, -2341.8515625, 84.53125),
	Vector(2720.6176757813, -2209.9294433594, 84.53125),
	Vector(2743.1296386719, -2100.3835449219, 84.53125),
	Vector(2751.7202148438, -1959.6610107422, 84.53125),
	Vector(2725.9536132813, -1843.5205078125, 84.53125),
	Vector(2733.2397460938, -1697.4829101563, 84.53125),
	Vector(2734.5444335938, -1569.0108642578, 84.53125),
	Vector(2464.646484375, -1534.7631835938, 84.53125),
	Vector(2466.4587402344, -1656.7662353516, 84.773590087891),
	Vector(2473.8327636719, -1784.369140625, 84.728660583496),
	Vector(2479.5344238281, -1912.9523925781, 84.53125),
	Vector(2488.7607421875, -2041.3098144531, 84.53125),
	Vector(2483.6647949219, -2165.8386230469, 84.53125),
	Vector(2474.6694335938, -2297.2531738281, 84.53125),
	Vector(2608.9440917969, -1503.4262695313, 84.53125),
	Vector(2601.541015625, -1660.2999267578, 84.53125),
	Vector(2596.0141601563, -1838.9705810547, 84.53125),
	Vector(2610.3583984375, -2041.9670410156, 84.53125),
	Vector(2600.3996582031, -2255.2883300781, 84.53125),
	Vector(2614.7863769531, -2446.6433105469, 84.53125),
	Vector(2604.4650878906, -2667.9846191406, 84.53125),
	Vector(2473.6560058594, -2423.1086425781, 84.53125),
	Vector(2722.162109375, -2460.3659667969, 84.53125),
	Vector(2729.9130859375, -2341.8515625, 84.53125),
	Vector(2720.6176757813, -2209.9294433594, 84.53125),
	Vector(2743.1296386719, -2100.3835449219, 84.53125),
	Vector(2751.7202148438, -1959.6610107422, 84.53125),
	Vector(2725.9536132813, -1843.5205078125, 84.53125),
	Vector(2733.2397460938, -1697.4829101563, 84.53125),
	Vector(2734.5444335938, -1569.0108642578, 84.53125),
	Vector(2464.646484375, -1534.7631835938, 84.53125),
	Vector(2466.4587402344, -1656.7662353516, 84.773590087891),
	Vector(2473.8327636719, -1784.369140625, 84.728660583496),
	Vector(2479.5344238281, -1912.9523925781, 84.53125),
	Vector(2488.7607421875, -2041.3098144531, 84.53125),
	Vector(2483.6647949219, -2165.8386230469, 84.53125),
	Vector(2474.6694335938, -2297.2531738281, 84.53125),
	Vector(2608.9440917969, -1503.4262695313, 84.53125),
	Vector(2601.541015625, -1660.2999267578, 84.53125),
	Vector(2596.0141601563, -1838.9705810547, 84.53125),
	Vector(2610.3583984375, -2041.9670410156, 84.53125),
	Vector(2600.3996582031, -2255.2883300781, 84.53125),
	Vector(2614.7863769531, -2446.6433105469, 84.53125),
	Vector(2604.4650878906, -2667.9846191406, 84.53125),
	Vector(2473.6560058594, -2423.1086425781, 84.53125),
	Vector(2722.162109375, -2460.3659667969, 84.53125),
	Vector(2729.9130859375, -2341.8515625, 84.53125),
	Vector(2720.6176757813, -2209.9294433594, 84.53125),
	Vector(2743.1296386719, -2100.3835449219, 84.53125),
	Vector(2751.7202148438, -1959.6610107422, 84.53125),
	Vector(2725.9536132813, -1843.5205078125, 84.53125),
	Vector(2733.2397460938, -1697.4829101563, 84.53125),
	Vector(2734.5444335938, -1569.0108642578, 84.53125),
	Vector(2464.646484375, -1534.7631835938, 84.53125),
	Vector(2466.4587402344, -1656.7662353516, 84.773590087891),
	Vector(2473.8327636719, -1784.369140625, 84.728660583496),
	Vector(2479.5344238281, -1912.9523925781, 84.53125),
	Vector(2488.7607421875, -2041.3098144531, 84.53125),
	Vector(2483.6647949219, -2165.8386230469, 84.53125),
	Vector(2474.6694335938, -2297.2531738281, 84.53125),
	Vector(2608.9440917969, -1503.4262695313, 84.53125),
	Vector(2601.541015625, -1660.2999267578, 84.53125),
	Vector(2596.0141601563, -1838.9705810547, 84.53125),
	Vector(2610.3583984375, -2041.9670410156, 84.53125),
	Vector(2600.3996582031, -2255.2883300781, 84.53125),
	Vector(2614.7863769531, -2446.6433105469, 84.53125),
	Vector(2604.4650878906, -2667.9846191406, 84.53125),
	Vector(2473.6560058594, -2423.1086425781, 84.53125),
	Vector(2722.162109375, -2460.3659667969, 84.53125),
	Vector(2729.9130859375, -2341.8515625, 84.53125),
	Vector(2720.6176757813, -2209.9294433594, 84.53125),
	Vector(2743.1296386719, -2100.3835449219, 84.53125),
	Vector(2751.7202148438, -1959.6610107422, 84.53125),
	Vector(2725.9536132813, -1843.5205078125, 84.53125),
	Vector(2733.2397460938, -1697.4829101563, 84.53125),
	Vector(2734.5444335938, -1569.0108642578, 84.53125),
	Vector(2464.646484375, -1534.7631835938, 84.53125),
	Vector(2466.4587402344, -1656.7662353516, 84.773590087891),
	Vector(2473.8327636719, -1784.369140625, 84.728660583496),
	Vector(2479.5344238281, -1912.9523925781, 84.53125),
	Vector(2488.7607421875, -2041.3098144531, 84.53125),
	Vector(2483.6647949219, -2165.8386230469, 84.53125),
	Vector(2474.6694335938, -2297.2531738281, 84.53125),
	Vector(2608.9440917969, -1503.4262695313, 84.53125),
	Vector(2601.541015625, -1660.2999267578, 84.53125),
	Vector(2596.0141601563, -1838.9705810547, 84.53125),
	Vector(2610.3583984375, -2041.9670410156, 84.53125),
	Vector(2600.3996582031, -2255.2883300781, 84.53125),
	Vector(2614.7863769531, -2446.6433105469, 84.53125),
	Vector(2604.4650878906, -2667.9846191406, 84.53125),
	Vector(2473.6560058594, -2423.1086425781, 84.53125),
	Vector(2722.162109375, -2460.3659667969, 84.53125),
	Vector(2729.9130859375, -2341.8515625, 84.53125),
	Vector(2720.6176757813, -2209.9294433594, 84.53125),
	Vector(2743.1296386719, -2100.3835449219, 84.53125),
	Vector(2751.7202148438, -1959.6610107422, 84.53125),
	Vector(2725.9536132813, -1843.5205078125, 84.53125),
	Vector(2733.2397460938, -1697.4829101563, 84.53125),
	Vector(2734.5444335938, -1569.0108642578, 84.53125),
	Vector(2464.646484375, -1534.7631835938, 84.53125),
	Vector(2466.4587402344, -1656.7662353516, 84.773590087891),
	Vector(2473.8327636719, -1784.369140625, 84.728660583496),
	Vector(2479.5344238281, -1912.9523925781, 84.53125),
	Vector(2488.7607421875, -2041.3098144531, 84.53125),
	Vector(2483.6647949219, -2165.8386230469, 84.53125),
	Vector(2474.6694335938, -2297.2531738281, 84.53125),
	Vector(2608.9440917969, -1503.4262695313, 84.53125),
	Vector(2601.541015625, -1660.2999267578, 84.53125),
	Vector(2596.0141601563, -1838.9705810547, 84.53125),
	Vector(2610.3583984375, -2041.9670410156, 84.53125),
	Vector(2600.3996582031, -2255.2883300781, 84.53125),
	Vector(2614.7863769531, -2446.6433105469, 84.53125),
	Vector(2604.4650878906, -2667.9846191406, 84.53125),
}
--Alt guard spawns, used for some special rounds where
--the gaurds shouldn't be stuffed in a room
SPAWN_GUARD_HALLWAY = {
	Vector(-758.98797607422, -625.28332519531, 544.53125),
	Vector(-1052.6958007813, -627.90649414063, 544.53125),
	Vector(-1326.0316162109, -615.31805419922, 544.53125),
	Vector(-1470.2510986328, -734.20642089844, 544.53125),
	Vector(-1683.2490234375, -758.20281982422, 544.53125),
	Vector(-1674.9090576172, -506.92709350586, 544.53125),
	Vector(-1217.4602050781, -304.75317382813, 672.53125),
	Vector(-1241.5830078125, -665.69927978516, 672.53125),
	Vector(-1243.2384033203, -985.33233642578, 672.53125),
	Vector(-1244.8598632813, 87.120727539063, 672.53125),
	Vector(-1472.1368408203, 139.57382202148, 672.53125),
	Vector(-1788.2536621094, 105.36435699463, 672.53125),
	Vector(-2216.3037109375, 121.5862121582, 672.53125),
	Vector(-2704.1682128906, 94.828010559082, 672.53125),
	Vector(-750.92346191406, 106.44682312012, 672.53125),
	Vector(-581.78735351563, 714.60137939453, 736.53125),
	Vector(-209.08427429199, 105.00859069824, 672.53125),
	Vector(-31.32040977478, 125.12967681885, 672.53125),
	Vector(-758.98797607422, -625.28332519531, 544.53125),
	Vector(-1052.6958007813, -627.90649414063, 544.53125),
	Vector(-1326.0316162109, -615.31805419922, 544.53125),
	Vector(-1470.2510986328, -734.20642089844, 544.53125),
	Vector(-1683.2490234375, -758.20281982422, 544.53125),
	Vector(-1674.9090576172, -506.92709350586, 544.53125),
	Vector(-1217.4602050781, -304.75317382813, 672.53125),
	Vector(-1241.5830078125, -665.69927978516, 672.53125),
	Vector(-1243.2384033203, -985.33233642578, 672.53125),
	Vector(-1244.8598632813, 87.120727539063, 672.53125),
	Vector(-1472.1368408203, 139.57382202148, 672.53125),
	Vector(-1788.2536621094, 105.36435699463, 672.53125),
	Vector(-2216.3037109375, 121.5862121582, 672.53125),
	Vector(-2704.1682128906, 94.828010559082, 672.53125),
	Vector(-750.92346191406, 106.44682312012, 672.53125),
	Vector(-581.78735351563, 714.60137939453, 736.53125),
	Vector(-209.08427429199, 105.00859069824, 672.53125),
	Vector(-31.32040977478, 125.12967681885, 672.53125),
	Vector(-758.98797607422, -625.28332519531, 544.53125),
	Vector(-1052.6958007813, -627.90649414063, 544.53125),
	Vector(-1326.0316162109, -615.31805419922, 544.53125),
	Vector(-1470.2510986328, -734.20642089844, 544.53125),
	Vector(-1683.2490234375, -758.20281982422, 544.53125),
	Vector(-1674.9090576172, -506.92709350586, 544.53125),
	Vector(-1217.4602050781, -304.75317382813, 672.53125),
	Vector(-1241.5830078125, -665.69927978516, 672.53125),
	Vector(-1243.2384033203, -985.33233642578, 672.53125),
	Vector(-1244.8598632813, 87.120727539063, 672.53125),
	Vector(-1472.1368408203, 139.57382202148, 672.53125),
	Vector(-1788.2536621094, 105.36435699463, 672.53125),
	Vector(-2216.3037109375, 121.5862121582, 672.53125),
	Vector(-2704.1682128906, 94.828010559082, 672.53125),
	Vector(-750.92346191406, 106.44682312012, 672.53125),
	Vector(-581.78735351563, 714.60137939453, 736.53125),
	Vector(-209.08427429199, 105.00859069824, 672.53125),
	Vector(-31.32040977478, 125.12967681885, 672.53125),
	Vector(-758.98797607422, -625.28332519531, 544.53125),
	Vector(-1052.6958007813, -627.90649414063, 544.53125),
	Vector(-1326.0316162109, -615.31805419922, 544.53125),
	Vector(-1470.2510986328, -734.20642089844, 544.53125),
	Vector(-1683.2490234375, -758.20281982422, 544.53125),
	Vector(-1674.9090576172, -506.92709350586, 544.53125),
	Vector(-1217.4602050781, -304.75317382813, 672.53125),
	Vector(-1241.5830078125, -665.69927978516, 672.53125),
	Vector(-1243.2384033203, -985.33233642578, 672.53125),
	Vector(-1244.8598632813, 87.120727539063, 672.53125),
	Vector(-1472.1368408203, 139.57382202148, 672.53125),
	Vector(-1788.2536621094, 105.36435699463, 672.53125),
	Vector(-2216.3037109375, 121.5862121582, 672.53125),
	Vector(-2704.1682128906, 94.828010559082, 672.53125),
	Vector(-750.92346191406, 106.44682312012, 672.53125),
	Vector(-581.78735351563, 714.60137939453, 736.53125),
	Vector(-209.08427429199, 105.00859069824, 672.53125),
	Vector(-31.32040977478, 125.12967681885, 672.53125),
	Vector(-758.98797607422, -625.28332519531, 544.53125),
	Vector(-1052.6958007813, -627.90649414063, 544.53125),
	Vector(-1326.0316162109, -615.31805419922, 544.53125),
	Vector(-1470.2510986328, -734.20642089844, 544.53125),
	Vector(-1683.2490234375, -758.20281982422, 544.53125),
	Vector(-1674.9090576172, -506.92709350586, 544.53125),
	Vector(-1217.4602050781, -304.75317382813, 672.53125),
	Vector(-1241.5830078125, -665.69927978516, 672.53125),
	Vector(-1243.2384033203, -985.33233642578, 672.53125),
	Vector(-1244.8598632813, 87.120727539063, 672.53125),
	Vector(-1472.1368408203, 139.57382202148, 672.53125),
	Vector(-1788.2536621094, 105.36435699463, 672.53125),
	Vector(-2216.3037109375, 121.5862121582, 672.53125),
	Vector(-2704.1682128906, 94.828010559082, 672.53125),
	Vector(-750.92346191406, 106.44682312012, 672.53125),
	Vector(-581.78735351563, 714.60137939453, 736.53125),
	Vector(-209.08427429199, 105.00859069824, 672.53125),
	Vector(-31.32040977478, 125.12967681885, 672.53125),
	Vector(-758.98797607422, -625.28332519531, 544.53125),
	Vector(-1052.6958007813, -627.90649414063, 544.53125),
	Vector(-1326.0316162109, -615.31805419922, 544.53125),
	Vector(-1470.2510986328, -734.20642089844, 544.53125),
	Vector(-1683.2490234375, -758.20281982422, 544.53125),
	Vector(-1674.9090576172, -506.92709350586, 544.53125),
	Vector(-1217.4602050781, -304.75317382813, 672.53125),
	Vector(-1241.5830078125, -665.69927978516, 672.53125),
	Vector(-1243.2384033203, -985.33233642578, 672.53125),
	Vector(-1244.8598632813, 87.120727539063, 672.53125),
	Vector(-1472.1368408203, 139.57382202148, 672.53125),
	Vector(-1788.2536621094, 105.36435699463, 672.53125),
	Vector(-2216.3037109375, 121.5862121582, 672.53125),
	Vector(-2704.1682128906, 94.828010559082, 672.53125),
	Vector(-750.92346191406, 106.44682312012, 672.53125),
	Vector(-581.78735351563, 714.60137939453, 736.53125),
	Vector(-209.08427429199, 105.00859069824, 672.53125),
	Vector(-31.32040977478, 125.12967681885, 672.53125),


}
--Medbay spawns for guards
SPAWN_GUARD = {
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
	Vector(-41.954284667969, 125.42084503174, 672.53125),
	Vector(-26.435464859009, 257.02523803711, 672.53125),
	Vector(-159.48141479492, 273.83093261719, 672.53125),
	Vector(-221.49758911133, 159.43148803711, 672.53125),
	Vector(-195.99356079102, 14.636581420898, 672.53125),
	Vector(-73.574615478516, -50.370334625244, 672.53125),
	Vector(36.752128601074, -36.891593933105, 672.53125),
}
--Nine tailed fox spawns
SPAWN_OUTSIDE = {
	Vector(-9174.794921875, -2639.1457519531, 801.03125),
	Vector(-9178.794921875, -2430.5234375, 801.03125),
	Vector(-9196.7119140625, -2158.3520507813, 801.03125),
	Vector(-8990.9365234375, -2132.9409179688, 801.03125),
	Vector(-8959.8994140625, -2367.1440429688, 801.03125),
	Vector(-8929.935546875, -2634.3210449219, 801.03125),
	Vector(-9336.8203125, -2938.0144042969, 801.03125),
	Vector(-9438.7705078125, -2450.8962402344, 801.03125),
	Vector(-9478.6025390625, -2095.7114257813, 801.03125),

}
--Leave this 0
LAST_RDC_TIME = 0
--Sci Spawns
SPAWN_SCIENT = {
	Vector(2141.5708007813, -2641.2961425781, 84.53125),
	Vector(1697.4201660156, -2455.3076171875, 84.879676818848),
	Vector(1374.0491943359, -2440.4770507813, 84.53125),
	Vector(1365.892578125, -2176.00390625, 84.53125),
	Vector(1659.544921875, -1903.9129638672, 84.53125),
	Vector(1296.0281982422, -1880.79296875, 84.53125),
	Vector(1681.8778076172, -1482.8704833984, 84.53125),
	Vector(1780.9331054688, -3694.8693847656, 529.53125),
	Vector(3069.4304199219, -3072.9545898438, 37.53125),
	Vector(3259.5229492188, -2664.0148925781, 37.53125),
	Vector(3510.2758789063, -2189.3046875, 37.53125),
	Vector(2437.5607910156, -3823.318359375, -542.46875),
	Vector(1138.0546875, -3433.6770019531, -516.46875),
	Vector(969.23272705078, -3738.4899902344, -644.97283935547),
	Vector(964.67736816406, -3963.9201660156, -645.46875),
	Vector(1025.7678222656, -4190.423828125, -645.46875),
	Vector(2836.0632324219, -4177.8549804688, -645.46875),
	Vector(3042.0678710938, -3293.9040527344, -645.46875),
	Vector(4057.6149902344, -2994.3046875, 37.53125),
	Vector(3629.4768066406, -2533.9255371094, 37.53125),
	Vector(2141.5708007813, -2641.2961425781, 84.53125),
	Vector(1697.4201660156, -2455.3076171875, 84.879676818848),
	Vector(1374.0491943359, -2440.4770507813, 84.53125),
	Vector(1365.892578125, -2176.00390625, 84.53125),
	Vector(1659.544921875, -1903.9129638672, 84.53125),
	Vector(1296.0281982422, -1880.79296875, 84.53125),
	Vector(1681.8778076172, -1482.8704833984, 84.53125),
	Vector(1780.9331054688, -3694.8693847656, 529.53125),
	Vector(3069.4304199219, -3072.9545898438, 37.53125),
	Vector(3259.5229492188, -2664.0148925781, 37.53125),
	Vector(3510.2758789063, -2189.3046875, 37.53125),
	Vector(2437.5607910156, -3823.318359375, -542.46875),
	Vector(1138.0546875, -3433.6770019531, -516.46875),
	Vector(969.23272705078, -3738.4899902344, -644.97283935547),
	Vector(964.67736816406, -3963.9201660156, -645.46875),
	Vector(1025.7678222656, -4190.423828125, -645.46875),
	Vector(2836.0632324219, -4177.8549804688, -645.46875),
	Vector(3042.0678710938, -3293.9040527344, -645.46875),
	Vector(4057.6149902344, -2994.3046875, 37.53125),
	Vector(3629.4768066406, -2533.9255371094, 37.53125),
	Vector(2141.5708007813, -2641.2961425781, 84.53125),
	Vector(1697.4201660156, -2455.3076171875, 84.879676818848),
	Vector(1374.0491943359, -2440.4770507813, 84.53125),
	Vector(1365.892578125, -2176.00390625, 84.53125),
	Vector(1659.544921875, -1903.9129638672, 84.53125),
	Vector(1296.0281982422, -1880.79296875, 84.53125),
	Vector(1681.8778076172, -1482.8704833984, 84.53125),
	Vector(1780.9331054688, -3694.8693847656, 529.53125),
	Vector(3069.4304199219, -3072.9545898438, 37.53125),
	Vector(3259.5229492188, -2664.0148925781, 37.53125),
	Vector(3510.2758789063, -2189.3046875, 37.53125),
	Vector(2437.5607910156, -3823.318359375, -542.46875),
	Vector(1138.0546875, -3433.6770019531, -516.46875),
	Vector(969.23272705078, -3738.4899902344, -644.97283935547),
	Vector(964.67736816406, -3963.9201660156, -645.46875),
	Vector(1025.7678222656, -4190.423828125, -645.46875),
	Vector(2836.0632324219, -4177.8549804688, -645.46875),
	Vector(3042.0678710938, -3293.9040527344, -645.46875),
	Vector(4057.6149902344, -2994.3046875, 37.53125),
	Vector(3629.4768066406, -2533.9255371094, 37.53125),
}
--Keyguard level 2 spawns
--For every 'zone' that a level two should spawn in, use a subtable
--You can have as many zones as you'd like
SPAWN_KEYCARD2 = {
	lczaround1 = {
		Vector(2028.2718505859, -3073.5715332031, -645.46875),
		Vector(2456.6193847656, -3521.2189941406, -764.46875),
		Vector(3009.3127441406, -4090.6865234375, -645.46875),
		Vector(1057.9127197266, -3139.8674316406, -645.46875),
		Vector(1028.0751953125, -3660.2250976563, -58.46875),
		Vector(2092.2106933594, -4127.7836914063, 117.53125),
		Vector(1717.2954101563, -3284.1237792969, 529.53125),
		Vector(911.38012695313, -4146.5859375, 529.53125),
	},
	hcz = {
		Vector(1493.4106445313, 538.07116699219, -1616.46875),
		Vector(4258.6323242188, -243.42958068848, -1624.46875),
		Vector(2578.0261425469, -1048.6148681641, -1232.46875),
		Vector(1835.283203125, -2378.4604492188, -1231.46875),
		Vector(3854.4909667969, -2274.8583984375, -1232.46875),
		Vector(836.62823486328, -1601.9680175781, -1616.46875),
		Vector(-256.76031494141, 317.26431274414, -1616.46875),
	},
}
--Keyguard level 4 spawns
--For every 'zone' that a level three should spawn in, use a subtable
--You can have as many zones as you'd like
SPAWN_KEYCARD3 = {
	lcz1 = {
		Vector(1828.4659423828, -4181.599609375, -114.46875),
		Vector(2646.9272460938, -3742.9184570313, -645.46875),
		Vector(3583.1018066406, -3506.6982421875, -645.46875),
		Vector(845.01806640625, -4444.7045898438, -645.46875),
		Vector(2414.8173828125, -4176.7807617188, -1231.7438964844),
		Vector(2512.5349121094, -3836.3862304688, -542.46875),
		Vector(4038.6110839844, -2745.1977539063, 37.53125),
	},
	lcz_and_ez = {
		Vector(1853.0908203125, 1674.2933349609, -1424.46875),
		Vector(3069.8522949219, 2985.2900390625, -1836.46875),
		Vector(891.10089111328, 4445.0434570313, -1616.46875),
		Vector(-139.71482849121, 35.8752784729, 708.78125),
		Vector(-2522.4504394531, 1.4385566711426, 672.53125),
	},
}
--Keyguard level 4 spawns
--For every 'zone' that a level four should spawn in, use a subtable
--You can have as many zones as you'd like
--Currently one keycard per zone is spawned, this will change
SPAWN_KEYCARD4 = {
	hcz1 = {
		Vector(2532.0920410156, 2736.1530761719, -1923.46875),
		Vector(22.714315414429, 2313.203125, -1727.7236328125),
		Vector(2107.3835449219, 839.67926025391, -1703.8029785156),
	},
	hcz2 = {
		Vector(4010.2036132813, -2133.2121582031, 37.53125),
		Vector(-1962.5626220703, 284.93655395508, -2000.46875),
	},
	hcz3 = {
		Vector(-1324.9143066406, -7648.7614254688, 579.03125),
	},
}
--A table containing keycard 5 spawns, 1 or 2 per game depending on player count
--Currently the 2 spawns are placeholders
--This is unused, but will be used soon
SPAWN_KEYCARD5 = {
	Vector(-3584.0114746094, -3904.5625, 800.55126953125),
}
--Medkits
SPAWN_MEDKITS = {
	Vector(1981.4095458984, -3592.9970703125, 552.21063232422),
	Vector(2038.7913818359, -2313.5939941406, 84.53125),
	Vector(2473.8520507813, -3072.2182617188, -645.46875),
	Vector(3372.6359863281, -3021.9914550781, -645.46875),
	Vector(2998.224609375, 1857.4987792969, -1616.46875),
	Vector(-1666.421875, -1143.23828125, -1617.46875),
	Vector(-1001.2692871094, -1278.4122314453, -1616.46875),
	Vector(2833.4838867188, 3365.7470703125, -1872.46875),
	Vector(1413.2917480469, 4815.7172851563, -1616.46875),
	Vector(1126.0106201172, -3643.5124511719, 529.53125),
	Vector(1669.0269775391, -1836.8424072266, 84.53125),
	Vector(3154.3891601563, -2878.3051757813, 78.28125),
	Vector(-729.86907958984, -772.41217041016, 544.53125),
}
--Places to spawn items like SNAVs and such
SPAWN_MISCITEMS = {
	Vector(-915.53656005859, -462.87091064453, 584.53125),
	Vector(-2536.8657226563, 215.97720336914, 672.53125),
	Vector(-2130.0126953125, 515.07202148438, 672.53125),
	Vector(-1427.2171630859, 1102.5445556641, 672.46423339844),
	Vector(-996.47985839844, -1257.0697021484, -1616.46875),
	Vector(868.02478027344, -1632.1300048828, -1616.46875),
	Vector(2257.607421875, -3058.7622070313, -626.71575927734),
	Vector(853.82366943359, -4390.685546875, -645.46875),
	Vector(1435.7286376953, -1714.6072998047, 123.77802276611),
	Vector(1720.7308349609, -1709.4873046875, 121.64283752441),
	Vector(1562.4749755859, -1621.4114990234, 84.53125),
	Vector(1842.0706787109, -1617.5030517578, 84.53125),
	Vector(3655.990234375, -2697.5812988281, 37.53125),
	Vector(1408.7668457031, -2917.0900878906, 529.53125),
	Vector(622.86370849609, 2023.1998291016, -1616.46875),
}
--Night vision goggles
--Currently do to a comment I forgot to remove in the init file
--all of these are used, soon we will use a math formula to determine
--how many to spawn, as of now, just put as many as you want
SPAWN_NVG = {
	Vector(2014.8900146484, -2744.0190429688, 84.53125),
	Vector(1840.2877197266, -3378.4536132813, 529.53125),
	Vector(2997.8640136719, -2419.650390625, 37.53125),
	Vector(2082.8947753906, -2445.4506835938, -1231.4528808594),
	Vector(-1022.6306762695, -489.69445800781, -1583.1500244141),
	Vector(3050.8842773438, 1801.7546386719, -1616.46875),
	Vector(1318.8664550781, -1360.1951904297, 84.53125),
	Vector(2176.8530273438, -4581.2568359375, -1232.46875),
	Vector(-2253.3386230469, 1024.4926757813, -1616.46875),
	Vector(-129.03497314453, 72.226203918457, 708.78125),
	Vector(-123.50080108643, 140.10241699219, 708.78125),
	Vector(-136.93403625488, 194.23690795898, 708.78125),
	Vector(-607.06262207031, 683.28582763672, 736.53125),
	Vector(-2110.3942871094, 691.81475830078, 672.53125),
	Vector(-3059.5534667969, 98.911407470703, 672.53125),
	Vector(-1618.837890625, -753.47692871094, 544.53125),
}

SPAWN_BATTERY9 = {

}

SPAWN_BATTERY18 = {

}


SPAWN_BATTERY_STR = {}

--Crowbar spawns, will include other mapspawn melee weapons as they're added
SPAWN_MELEEWEPS = {
	Vector(2359.6923828125, -3734.1694335938, -1232.46875),
	Vector(1439.7735595703, -4201.5751953125, 529.53125),
	Vector(-1035.4306640625, 1129.0385742188, 672.46423339844),
}
--GUN SPAWNS:
--All gun spawns are always used, ie every spawn in the table will have a gun

--That one shotgun by gate b
--More than one will be good
SPAWN_SHOTGUNS = {
	Vector(-1133.7358398438, -2230.2470703125, 672.53125),
}
--Riffle ammo spawns
SPAWN_AMMO_RIFLE = {
	Vector(-1102.9537353516, -1116.6102294922, -1616.46875),
	Vector(-1231.9379882813, -1116.5959472656, -1616.46875),
	Vector(-1390.98046875, -1127.9736328125, -1616.46875),
	Vector(-2836.0358886719, 46.277351379395, 672.53125),
	Vector(-2748.7121582031, 42.92276763916, 672.53125),
	Vector(3945.8051757813, -2152.9069824219, 37.53125),
	Vector(3101.8044433594, -1449.4431152344, -1232.46875),
	Vector(4181.3657226563, 123.12118530273, -1624.46875),
	Vector(1783.9388427734, 1665.5168457031, -1388.46875),
	Vector(-1458.9765625, -687.46514892578, -2001.46875),
}

--Rifles, like aks
SPAWN_RIFLES = {
	Vector(-1450.7012939453, -1215.9903564453, -1616.46875)+GUN_RAISE_CONSTANT,
	Vector(-1369.9248046875, -1205.9947509766, -1616.46875)+GUN_RAISE_CONSTANT,
	Vector(-1222.9904785156, -1199.4812011719, -1616.46875)+GUN_RAISE_CONSTANT,
	Vector(-1111.9393310547, -1199.7067871094, -1616.46875)+GUN_RAISE_CONSTANT,
	Vector(-2974.8645019531, 70.107841491699, 672.53125)+GUN_RAISE_CONSTANT,
	Vector(-2940.2431640625, 171.04797363281, 672.53125)+GUN_RAISE_CONSTANT,
	Vector(4029.6520996094, -2253.0026855469, 37.53125)+GUN_RAISE_CONSTANT,
	Vector(3160.2751464844, -1459.1781005859, -1232.46875)+GUN_RAISE_CONSTANT,
	Vector(4314.3061523438, 123.49380493164, -1624.46875)+GUN_RAISE_CONSTANT,
	Vector(1777.1866455078, 1786.7174072266, -1388.46875)+GUN_RAISE_CONSTANT,
}

--SMGs
SPAWN_SMGS = {
	Vector(-1203.6971435547, -1050.9610595703, -1616.46875)+GUN_RAISE_CONSTANT,
	Vector(-1016.0836791992, -1043.7532958984, -1616.46875)+GUN_RAISE_CONSTANT,
	Vector(-2599.205078125, 61.611946105957, 672.53125)+GUN_RAISE_CONSTANT,
	Vector(-2765.5004882813, 165.17230224609, 672.53125)+GUN_RAISE_CONSTANT,
	Vector(-2844.9377441406, 106.39051818848, 672.53125)+GUN_RAISE_CONSTANT,
	Vector(-2968.8122558594, 107.52671051025, 672.53125)+GUN_RAISE_CONSTANT,
	Vector(-2527.927734375, 206.0290222168, 672.53125)+GUN_RAISE_CONSTANT,
	Vector(-1234.4829101563, -1145.6501464844, -1573.8714599609)+GUN_RAISE_CONSTANT,
	Vector(-1034.0567626953, -1150.2061767578, -1566.2507324219)+GUN_RAISE_CONSTANT,
	Vector(4896.4829101563, 1546.9367675781, -1616.46875)+GUN_RAISE_CONSTANT,
	Vector(3657.2839355469, -2992.1391601563, -1351.46875)+GUN_RAISE_CONSTANT,



}

--SMG ammo spawns
SPAWN_AMMO_SMG = {
	Vector(-1480.318359375, -1045.2004394531, -1616.46875),
	Vector(-1340.7994384766, -1058.0543212891, -1616.46875),
	Vector(-2622.4331054688, 251.67672729492, 681.06604003906),
	Vector(-2697.6723632813, 257.74606323242, 685.78747558594),
	Vector(-2697.6723632813, 257.74606323242, 730.78747558594),
	Vector(-2939.6127929688, 260.71502685547, 684.63775634766),
	Vector(-3040.7280273438, -55.079036712646, 704.83526611328),
	Vector(-2680.1354980469, -46.633876800537, 734.01788330078),
	Vector(-2889.3803710938, -50.65550994873, 764.28942871094),
	Vector(-1498.6027832031, -1000.6492919922, -1581.1063232422),
	Vector(-1229.8671875, -1313.9362792969, -1584.1300048828),
	Vector(-1106.5549316406, -1306.1467285156, -1556.1258544922),
	Vector(4914.8076171875, 1727.4368896484, -1616.46875),
	Vector(3570.6159667969, -2986.0363769531, -1351.46875),

}

--Pistol ammo
SPAWN_AMMO_PISTOL = {
	Vector(2295.8347167969, -2033.9033203125, 119.60329437256),
	Vector(2305.4289550781, -1774.1506347656, 69.456405639648),
	Vector(1997.0561523438, -1955.5107421875, 118.96007537842),
	Vector(1991.9483642578, -2191.2409667969, 143.38018798828),
	Vector(2077.7219238281, -4609.0073242188, 117.53125),

}
--Pistols
SPAWN_PISTOLS = {
	Vector(2096.5634765625, -1844.3736572266, 84.53125)+GUN_RAISE_CONSTANT,
	Vector(2203.6403808594, -1798.1351318359, 84.53125)+GUN_RAISE_CONSTANT,
	Vector(2192.9331054688, -1955.076171875, 84.53125)+GUN_RAISE_CONSTANT,
	Vector(2090.458984375, -2054.4638671875, 84.53125)+GUN_RAISE_CONSTANT,
	Vector(1661.767578125, -1664.1179199219, 93.39444732666)+GUN_RAISE_CONSTANT,
	Vector(2055.9223632813, -1086.0773925781, -1231.46875)+GUN_RAISE_CONSTANT,
}


SPAWN_SNIPERS = {

}
--Unused, won't ever be used
--Kept to stop GM from complaining
SPAWN_ZOMBIES = {
}

--Would be locations for a 096 nextbot to spawn
SPAWN_096NEXT = {

}

--The direction the nextbot would point
SCP096_ANGLES = {

}


--MTF Guard vests, all spawns are used
SPAWN_ARMORS = {

	// 15
	Vector(3691.1616210938, -3304.2421875, -644.46875),
	Vector(2990.3078613281, 2749.5454101563, -1616.46875),
	Vector(1635.5050048828, -938.82238769531, -1616.46875),
	Vector(2305.701171875, -3842.9711914063, -1232.46875),

}
--Fire proof vests, all spawns are used
SPAWN_FIREPROOFARMOR = {
	Vector(2950.4274902344, -4088.8518066406, -645.46875),
	Vector(267.0036315918, 539.81854248047, -1580.46875),

}
--Flash nades, all spawns are used
SPAWN_FLASH = {
	Vector(2250.6984863281, -1529.4874267578, -1232.46875),
	Vector(-1199.8308105469, -338.01419067383, 672.53125),
	Vector(-2642.4111328125, 166.75738525391, 740.24798583984),
	Vector(-2978.4487304688, 53.234073638916, 724.37145996094),
	Vector(-2194.1760253906, 550.67401142547, 672.53125),
	Vector(-1916.9365234375, -1154.1940917969, -1617.46875),
	Vector(-51.31755065918, 2257.6545410156, -1466.6905517578),
	Vector(2478.87890625, -3784.6403808594, -764.46875),
	Vector(2176.0454101563, -2179.3393554688, 140.91125488281),
	Vector(2076.7495117188, -2153.4182128906, 139.4157409668),
	Vector(2181.1013183594, -1897.5565185547, 117.95594787598),
	Vector(2748.1574707031, -2451.7626953125, 151.68591308594),
	Vector(2808.8203125, -1934.3972167969, 130.72177124023),
}
--Pills, all spawns are used
SPAWN_500 = {
	Vector(1810.4144287109, -2778.7355957031, 529.53125)+GUN_RAISE_CONSTANT,
	Vector(1533.4931640625, -3024.2634277344, 529.53125)+GUN_RAISE_CONSTANT,
	Vector(1522.4466552734, -2662.7956542969, 529.53125)+GUN_RAISE_CONSTANT,
	Vector(1225.9327392578, -4148.1801757813, 529.53125)+GUN_RAISE_CONSTANT,
	Vector(1934.2189941406, -3272.6723632813, 529.53125)+GUN_RAISE_CONSTANT,
	Vector(1768.5759277344, -3804.1987304688, 529.53125)+GUN_RAISE_CONSTANT,
	Vector(3764.1987304688, -3586.8110351563, -633.93231201172)+GUN_RAISE_CONSTANT,
	Vector(-1136.2790527344, -1130.3548583984, -1551.8317871094)+GUN_RAISE_CONSTANT,
	Vector(-1416.8853759766, -1090.5926513672, -1552.6762695313)+GUN_RAISE_CONSTANT,

}
--This was used back when chaos didn't spawn with MTF guards
--Feel free to add spawns for it, just know they probably won't ever be used
--(Use in Special round?)
SPAWN_CHAOS_S = SPAWN_GUARD
--THESE ARE MAP BUTTONS
--They are one of the most important things in this config
--Buttons should be accurate or they won't work
--This is where you set keycard requirements and door names
--Every 'door' is a subtable of BUTTONS
--You can have the following attributes on each door

--name (required) - Shown to the user when they use the door, set to an empty string to not Show
--pos (required) - The position of the button
--canactivate - A function thats called to determine if a player can use the button/ent, takes 2 arguments, the player and the ent
--usesounds - true or false value, whether or not the siren should play upon the door being used, false if not present
--clevel - The min. keycard level to use, this probably doesn't work well with canactivate
--customdenymsg - Shown to the user if it is determined they cannot use this door in canactivate (function), usually used to tell players trying to leave their spawn they can't yet during prep
--enabled - Not really sure, haven't played around with it, assuming its whether a door can be used
BUTTONS = {
	{
		name = "SCP-173 Doors",
		pos = Vector(1267.000000, -3933.169922, -6.250000),
		canactivate = function() return !preparing end,
		customdenymsg = "Please wait until the round begins.",
	},
	{
		name = "SCP-173 Door Control",
		pos = Vector(2003.000000, -4317.169922, 153.500000),
		canactivate = function() return !preparing end,
		customdenymsg = "Please wait until the round begins.",
		scpdoor = true,
	},
	{
		name = "SCP-173 Doors ",
		pos = Vector(1899.000000, -3933.169922, 169.750000),
		canactivate = function() return !preparing end,
		customdenymsg = "Please wait until the round begins.",
	},
	{
		name = "SCP-1162",
		pos = Vector(922.000000, -4245.169922, -593.250000),
		clevel = 2,
	},
	{
		name = "SCP-372",
		pos = Vector(3243.000000, -3425.669922, -592.500000),
		customdenymsg = "Please wait until the round begins.",
		canactivate = function () return !preparing end
	},
	{
		name = "freezer",
		pos = Vector(4107.000000, -2382.669922, 88.500000),
		clevel = 2,
	},
	{
		name = "LCZ Armory",
		pos = Vector(2146.989990, -2381.169922, 136.750000),
		clevel = 4,
	},
	{
		name = "Checkpoint 1",
		pos = Vector(2157.989990, -4076.669922, -1175.500000),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP then
					return true
				end
				return false
		end,
		customdenymsg = "You need at least a level 3 keycard for this door.",
		iscpdoor = true
	},
	{
		name = "Checkpoint 1",
		pos = Vector(2158.000000, -3903.169922, -1175.500000),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP then
					return true
				end
				return false
		end,
		iscpdoor = true,
		customdenymsg = "You need at least a level 3 keycard for this door."
	},
	{
		name = "Secret",
		pos = Vector(1796.000000, -2371.169922, -1179.250000),
		clevel = 5,
		customdenymsg = "You need a level 5 keycard to access the nuke control panel."
	},
	{
		name = "Warhead Control",
		pos = Vector(2579.010010, -1933.170044, -1180.000000),
		clevel = 3,
	},
	{
		name = "SCP-049",
		pos = Vector(4084.500000, -176.169998, -1571.510010),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "SCP-049",
		pos = Vector(4029.350098, -138.380005, -1571.500000),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start."
	},
	{
		name = "SCP-096",
		pos = Vector(4563.000000, 1441.839966, -1564.250000),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "SCP-106",
		pos = Vector(3033.000000, 2992.840088, -1563.250000),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "SCP-106",
		pos = Vector(2011.000000, 2976.840088, -1563.500000),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "SCP-939",
		pos = Vector(-419.899994, 2275.340088, -1388.500000),
		canactivate = function () return false end,
		customdenymsg = "",
		scpdoor = true,
	},
	{
		name = "SCP-457",
		pos = Vector(394.000000, 2.830000, -1563.500000),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "SCP-035",
		pos = Vector(-1551.010010, -692.169983, -1565.250000),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "SCP-682 Control",
		pos = Vector(-2213.000000, 950.929993, -1561.640015),
		canactivate = function () return false end,
		customdenymsg = "",
		scpdoor = true,
	},
	{
		name = "HCZ Armory",
		pos = Vector(-920.710022, -1155.170044, -1564.250000),
		clevel = 3,
	},
	{
		name = "SCP-076-02",
		pos = Vector(-467.290009, -327.390015, -1558.670044),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "Generic SCP Containment",
		pos = Vector(3144.000000, 1744.500000, -1563.250000),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "Generic SCP Containment",
		pos = Vector(3608.000000, 1741.839966, -1563.060059),
		canactivate = function () return !preparing end,
		customdenymsg = "Wait for the round to start.",
		scpdoor = true,
	},
	{
		name = "Checkpoint 2",
		pos = Vector(-1232.319946, 1002.840027, 729.429993),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP then
					return true
				end
				return false
		end,
		iscpdoor = true,
		customdenymsg = "You need at least a level 3 keycard for this door."
	},
	{
		name = "Checkpoint 2",
		pos = Vector(-1232.329956, 829.340027, 729.429993),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP then
					return true
				end
				return false
		end,
		customdenymsg = "You need at least a level 3 keycard for this door.",
		iscpdoor = true
	},
	{
		name = "MTF Spawn",
		pos = Vector(-279.000000, 104.830002, 724.750000),
		canactivate = function (ply) return !preparing end,
		customdenymsg = "Please wait until the round starts",
		scpdoor = true,
	},
	{
		name = "Electrical Room",
		pos = Vector(-2018.010010, 208.330002, 724.750000),
		clevel = 4,
	},
	{
		name = "Primary Lighting",
		pos = Vector(-1634.000000, 408.829987, 726.359985),
		canactivate = function () return false end,
		customdenymsg = "",
	},
	{
		name = "Lockdown",
		pos = Vector(-1791.000000, 637.020020, 722.750000),
		canactivate = function () return false end,
		customdenymsg = "",
	},
	{
		name = "Gate A",
		pos = Vector(-1364.000000, -1079.280029, 725.500000),
		clevel = 4,
		blockhns = true
	},
	{
		name = "SCP-966",
		pos = Vector(1395.010010, 910.840027, -1564.250000),
		canactivate = function (ply) return !preparing end,
		customdenymsg = "Please wait until the round starts",
		scpdoor = true,
	},
	{
		name = "Class E Detainment Center",
		pos = Vector(1298.989990, 4379.339844, -1563.260010),
		canactivate = function(pl, ent)
			if preparing then
				return false
			else
				if ent:GetSaveTable( ).m_bLocked then --The door is locked! Unlock it!
					print("Forcing door unlock!")
					ent:Fire("unlock")
					ent:Fire("use") --Open it now so the user doesnt have to press it again :)
				end
				return true
			end
		end --You can't open the door yet.
	},
	{
		name = "Class E Detainment Center",
		pos = Vector(1260.424805, 4324.189941, -1563.250000),
		canactivate = function(pl, ent)
			if preparing then
				return false
			else
				if ent:GetSaveTable( ).m_bLocked then --The door is locked! Unlock it!
					print("Forcing door unlock!")
					ent:Fire("unlock")
					ent:Fire("use") --Open it now so the user doesnt have to press it again :)
				end
				return true
			end
		end --You can't open the door yet.
	},
	{
		name = "Pizza Shop",
		pos = Vector(-5085.000000, 1140.000000, 846.250000),
		clevel = 5,
		customdenymsg = "Foundation secrets are contained in here, you need higher clearance."
	}

}
--Something to do with Gate A, will check exactly
POS_GATEA = Vector(-5564.3872070313, -504.9462890625, 809.56372070313)
--The center of the escort zone
POS_ESCORT = Vector(-3628.9118652344, -1973.1831054688, 800.55126953125)
--The button used to open the gate
POS_GATEABUTTON = Vector(-1364.000000, -1079.280029, 725.500000)
--The button used to open 173's room
POS_173DOORS = Vector(362.000000, 1592.000000, 294.000000)
--Maybe works?
POS_106DOORS = Vector(1728.000000, 4103.000000, 46.000000)
--Doesn't work due to the way the map works
POS_049BUTTON = Vector(5040.000000, -952.000000, -474.000000)
--Same as 173DOORS
POS_173BUTTON = Vector(362.000000, 1592.000000, 294.000000)
--Used to open 096's zone
POS_096BUTTON = Vector(4993.000000, 3592.000000, 53.000000)
--This line is fine
POS_096_1BTN = POS_096BUTTON
--Not even sure what thats used for
POS_682BUTTON = Vector(2288.000000, 3396.010010, -201.139999)
--This is probably unused
POS_BTN1048A1 = Vector(4291.740234, 2367.010010, 55.498001)
--Unused?
POS_BTN1048A2 = Vector(4217.953125, 2258.280518, 35.985283)
--Was used to open 966's old spawn, map broke it
POS_BTN966 = Vector(4291.740234, 2367.010010, 55.498001)

--new one
POS_BTN966_2 = Vector(4216.000000, 2256.000000, 38.000000)
--Pocket dem locations
POS_POCKETD = {
	Vector(-1550.2963867188, -6660.4555664063, 579.03125),
	Vector(-1555.8137207031, -6447.9306640625, 579.03125),
	Vector(-1297.078125, -6548.6611328125, 579.03125),
	Vector(-1362.8088378906, -6643.6879882813, 579.03125),
	Vector(-1149.0913085938, -10292.403320313, 579.03125),
	Vector(-1385.9625244141, -10261.905273438, 579.03125),
	Vector(-1245.8116455078, -10005.489257813, 579.03125),
}

--Called when a player requests gate a
--Use an empty function for maps without gates
local function Breach_RequestGateA(ply)
	print("map: gate a requested")
	if preparing or postround then return end
	if ply:CLevelGlobal() < 4 then return end
	if !(ply:Team() == TEAM_GUARD or ply:Team() == TEAM_CHAOS or ply:Team() == TEAM_GOC) then return end
	if nextgateaopen > CurTime() then
		ply:PrintMessage(HUD_PRINTTALK, "You cannot open Gate A now, you must wait " .. math.Round(nextgateaopen - CurTime()) .. " seconds")
		return
	end
	local gatea
	for id,ent in pairs(ents.FindByClass("func_button")) do
		for k,v in pairs(MAPBUTTONS) do
			if v["pos"] == ent:GetPos() then
				if v["name"] == "Gate A" then
					gatea = ent
				end
			end
		end
	end
	if IsValid(gatea) then
		nextgateaopen = CurTime() + 60
		timer.Simple(2, function()
			if IsValid(gatea) then
				gatea:Fire("unlock")
				gatea:Use(ply, ply, USE_ON, 1)
			end
		end)
	end
end

hook.Add("BreachMap_RequestGateA","Breach_gmsite19_requestGateA", Breach_RequestGateA)

--Sets the RDC's state, does nothing if already in the desired state
local function Breach_SetRDCState(desired)
	print("map config: doesn't use rdc")
end
hook.Add("BreachMap_SetRDCState", "Breach_site19_desiredRDC", Breach_SetRDCState)

--This function toggles if gate a is open or not
--This is probably unused, but I ported it just in case
local function Breach_ToggleGateA()
	print("map: toggle gate a")

	for k, v in pairs( ents.FindByClass( "func_button" ) ) do
		if v:GetPos() == POS_GATEABUTTON then
			ForceUse(v, USE_ON, 1)
		end
	end
end

hook.Add("BreachMap_ToggleGateA", "Breach_site19_ToggleMainGate", Breach_ToggleGateA)

--Function used in the gamemode to close SCP doors
--Some of this is probably broken on the default map
--Potientally unused
local function Breach_CloseSCPDoors()
	print("map: close scp doors")
	hook.Run("BreachMap_OpenSCPDoors")
end
hook.Add("BreachMap_CloseSCPDoors", "Breach_site19_CloseDoors", Breach_CloseSCPDoors)

--Function used to release SCPs at the start of the round
local function Breach_OpenSCPDoors()
	print("map: open scp doors")
	for k,v in pairs(BUTTONS) do
		if v.scpdoor then
			for x,y in pairs(ents.GetAll()) do
				if y:GetPos() == v.pos and y:GetClass() == "func_door" then
					y:Fire("open")
				elseif y:GetPos() == v.pos then
					y:Fire("use")
				end
			end
		end
	end
end
hook.Add("BreachMap_OpenSCPDoors", "Breach_site19_OpenDoors", Breach_OpenSCPDoors)


--Called right after we reset the map, this is called every round
--Called right when preparing starts, before any players / entities are spawned
--Use this if a map needs some things disabled or something
--Also can be used to clean map ents
local function Breach_PostMapCleanup()
	print("map: round init post clean")
	for k,v in pairs(ents.GetAll()) do
		if v:GetClass() == "func_rot_button" and v:GetPos() == Vector(-1634.000000, 408.829987, 726.359985) then
			v:Remove()
		end
	end
	local REMOVE_MODELS = {
		"models/props/cs_office/fire_extinguisher.mdl",
		"models/props_c17/hospital_shelf01.mdl",
		"models/props/hospital_ivstand01.mdl",
	}

	for k,v in pairs(REMOVE_MODELS) do
		for _,x in pairs(ents.FindByModel( v )) do
			print("Cleaned up model " .. v)
			x:Remove()

		end
	end
	local props = {
		[1] = {
			pos = Vector(-6052.091797, -822.588013, 998.360840),
			ang = Angle(-87.248, 161.115, -173.046),
		},
		[2] = {
			pos = Vector(-5920.812500, -501.710236, 989.880188),
			ang = Angle(85.825, 136.950, 179.962),
		},
		[3] = {
			pos = Vector(-5706.800781, -367.090332, 991.317200),
			ang = Angle(87.424, 128.683, -171.167),
		},
		[4] = {
			pos = Vector(-5559.713379, -263.942505, 990.191345),
			ang = Angle(0.005, -0.011, 90.341),
		},
		[5] = {
			pos = Vector(-5178.412598, -255.505661, 994.198120),
			ang = Angle(89.412, 87.226, -3.186),
		},
		[6] = {
			pos = Vector(-4999.982910, -445.791595, 992.377197),
			ang = Angle(89.242, 50.856, 53.652),
		},
		[7] = {
			pos = Vector(-5002.178223, -826.495239, 998.319092),
			ang = Angle(89.775, -120.674, -122.119),
		},
	}
	for k,v in pairs(props) do
		local e = ents.Create("prop_physics")
		if IsValid(e) then
			e:SetModel(Model("models/hunter/plates/plate8x8.mdl"))
			e:SetPos(v.pos)
			e:SetAngles(v.ang)
			e:Spawn()

			e:PhysicsInit(SOLID_VPHYSICS)
			local p = e:GetPhysicsObject()
			if IsValid(p) then
				p:EnableMotion(false)
			else
				e:Remove()
				ErrorNoHalt("Physics engine error\n")
			end

			e:SetColor(0,0,0,0)
			e:SetRenderMode(RENDERMODE_TRANSALPHA)
			e:SetNoDraw(true)
		end
	end
end

hook.Add("PostCleanupMap", "BreachMap_site19_mapcleaned", Breach_PostMapCleanup)

TIMED_GATE_SUPPORTED_MAP = true

hook.Add("FOpenGateA", "BreachMap_site19_gateaopenforced", function ()

	for k, v in pairs( ents.FindByClass( "func_door" ) ) do
		if v:GetName() == "gate_containment_door_l" or v:GetName() == "gate_containment_door_r" then
			v:Fire("Open")
		end
	end
end)
