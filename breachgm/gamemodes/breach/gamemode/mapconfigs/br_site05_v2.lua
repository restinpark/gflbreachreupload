// Serverside map config file, if you want to use a diffrent map change these variables
--Disable offset bullshit
MAP_NOCANCERMODE = true

DISABLED_SCPS = {
    "1048A",
    "082",
    "178",
    "1048",
    "681",
    "1048B",
	"2521",
    "160",
	"1471"
}

local V = Vector
local POINT_RAISE = Vector(0, 0, 30)
local POINT_LOWER = Vector(0, 0, -30)
local POINT_LOWER_2 = Vector(0, 0, -60)
--Spawn for Nuke
SPAWN_NUKE = Vector(-381.133484, 6223.273926, -2692.932617)
--Spawn for Memorial
SPAWN_GRAVE = Vector(-1943.675781, 14356.895508, -1794.904541)
--Spawn for WW
SPAWN_WW = V(525.011902, 4975.560547, -3185.834473)+POINT_LOWER
--Spawn for 1048
SPAWN_1048 = V(-2520.869873, 5117.703613, -3083.431152)+POINT_LOWER
--Spawn for 173
SPAWN_173 = V(-504.761780, 13953.388672, -1882.719116)
--Spawn for 106
SPAWN_106 = V(-4124.135742, 3755.373047, -3302.944824)
--Spawn for 049
--SPAWN_049 = V(-1366.4171142578, 4585.4638671875, -7167.96875)
SPAWN_049 = V(-5295.517578, 3825.166016, -2698.475098)+POINT_LOWER
--SPAWN_681 = V(-3831.2145996094, 3600.6867675781, -7391.96875)
--Spawn for 457
SPAWN_457 = V(-3977.417969, 13315.807617, -1884.437378)+POINT_LOWER
--Spawn for 966
SPAWN_966 = Vector(-3280.719727, 5485.912598, -2698.939209)+POINT_LOWER
--Spawn for 939
SPAWN_939 = V(488.732239, 4032.183838, -3166.604248)
--Spawn for 079
HB_SCP079 = Vector(-2752.889893, 6203.559082, -2707.068359)
SPAWN_079 = Vector(-2648.006592, 6266.826172, -2699.676025)
--Spawn for 682
SPAWN_682 = V(-812.501038, 3297.377441, -3401.970703)
--Spawn for 096, currently used by 966
--SPAWN_096 = Vector(4802.6372070313, 3624.287109375, 0.03125)
SPAWN_096 = V(-3302.267090, 3179.626221, -2699.468750)+POINT_LOWER
--Spawn for 035, if possible near D Class
SPAWN_035 = V(-643.024597, 12154.367188, -2778.727783)+POINT_LOWER
SPAWN_2845 = V(-2905.964111, 5128.125977, -3081.488281)+POINT_LOWER
--Spawn for 1048A, although on the default map he's near able, try finding a different spawn
SPAWN_1048A = nil
--Spawn for 066, aka the mistake scp
SPAWN_066 = V(-2514.147217, 5738.885742, -3081.680664)+POINT_LOWER
--Spawn for 076-02
SPAWN_0762 = V(-752.451965, 5264.828613, -3058.652100)+POINT_LOWER
--082
SPAWN_082 = nil
--966
SPAWN_966 = V(-3280.719727, 5485.912598, -2698.939209)+POINT_LOWER
--017's spawn
SPAWN_178_1 = V(-2132.815186, 5109.565918, -3083.376465)+POINT_LOWER
SPAWN_178 = SPAWN_178_1
--I WONDER WHAT THE FUCK THIS IS FOR
SPAWN_INTERCOM = V(-3697.568848, -3605.215088, -1876.213867)+POINT_LOWER
--914's entrance booth
--ENTER914 = V(774.09637451172, -629.68017578125, -8191.96875)
--914's output
--EXIR914 = V(760.01879882813, -1082.2673339844, -8191.96875)
--Where the bell would spawn, if it were ever added
--POS_513 = Vector(0, 0, 0)
--This is the trigger, the thing that starts the machine
--POS_914BUTTON = V(688, -838, -8148)
--This is the mode selector
--POS_914B_BUTTON = V(688, -839, -8134)
--This is where the vending machine should spawn
SPAWN_SCP_294 = V(-4371.135254, -3420.201172, -1882.518921)+POINT_LOWER_2
SPAWN_SCP_294_ANG = Angle(-1.674067, -89.482376, 0.000000)
SPAWN_SCP1025 = V(-4164.345215, 11575.232422, -1834.731201)
SPAWN_SCP1025_ANGLE = Angle(0, 0, 0)
--SPAWN_1048 = V(0, 0, 0)
SPAWN_372 = V(-2143.297852, 5757.848633, -3081.866699)+POINT_LOWER
SPAWN_330 = V(-2643.109863, -2661.593994, -1882.625366)+POINT_LOWER_2
--This is where the surface music starts, this is going to be updated soon, but maybe not
OUTSIDESOUNDS = V(-6675.037109, -5963.555176, -1561.064697)
SPAWN_458 = V(-3822.570557, -3561.023926, -1833.746338)
SPAWNS_348 = {
    V(-4466.692383, -3875.667236, -1843.042480),
    V(-3687.460693, -3839.040039, -1843.139648)
}
--Spawn for 038
SPAWN_038 = Vector(-2569.847412, 2933.875488, -2747.078613)+POINT_LOWER_2
--Spawn for SCP-1425
SPAWN_SCP1425 = V(-1932.260620, 13802.968750, -1855.607666)
SPAWN_SCP1425_ANGLE = Angle(0, 0, 0)
--Spawn for SCP-127
SPAWN_SCP127 = {
V(664.322754, -1631.560181, -8127.968750)+POINT_RAISE
}

--Spawn for SCP-512
SPAWN_SCP512 = {
 V(-610.868042, 10756.671875, -1884.019653)+POINT_RAISE
}

--Spawn for SCP-668
SPAWN_SCP668 = {
 V(-1853.663940, 14370.061523, -2003.164795)+POINT_RAISE
}

--Spawn for SCP-268
SPAWN_SCP268 = {
 V(-3288.510010, 5133.454102, -2698.518555)
}

--Spawn for SCP-2953
SPAWN_SCP2953 = {
 Vector(-4649.255859, 4306.512207, -3082.855713)+POINT_RAISE
}

--Spawn for SCP-154
SPAWN_SCP154 = {
 Vector(2317.658936, 13038.652344, -1884.926636)+POINT_RAISE
}

--Spawn for SCP-1290
SPAWN_SCP1290 = {
 Vector(73.031250, 5551.126465, -2876.181641)+POINT_RAISE
}

--Spawn for SCP-005
SPAWN_SCP005 = {
 V(-1911.390869, 2933.303467, -3082.877930)+POINT_LOWER_2
}

--Spawn for SCP-020
SPAWN_SCP020 = {
 Vector(-631.031250, 11903.059570, -2778.706787),
 Vector(-3608.146484, 13584.246094, -1883.294800),
 Vector(-718.968628, 10604.705078, -1883.316528),
 Vector(-2540.627197, 7658.422363, -1742.291748),
 Vector(-3281.302490, 5133.991211, -2698.510742),
 Vector(-2119.445068, 4101.285156, -2699.955322),
 Vector(-1184.968750, 3500.968750, -3403.443848),
 Vector(73.031250, 3391.031250, -2914.043213),
 Vector(-4552.600098, -3344.138672, -1883.059326),
 Vector(-3477.031250, -3420.201172, -1884.173950),
 Vector(62.968750, -3607.138672, -1947.249878),
 Vector(-4081.012451, -5548.031250, -1883.758789)
}
--Spawn for SCP-1162
SPAWN_1162 = V(-3307.326904, 14305.516602, -1887.751831)
--Spawn for SCP-1315
SPAWN_SCP1315 = V(-399.163391, 6301.810059, -2670.986816)+POINT_LOWER_2
SPAWN_SCP1315_ANGLE = Angle(3, 0, 0)
--Spawn for SCP-1315HB
SPAWN_SCP1315HB = V(-399.163391, 6301.810059, -2670.986816)+POINT_LOWER_2
SPAWN_SCP1315_ANGLEHB = Angle(3, 0, 0)
--Spawn for SCP-216
SPAWN_SCP216 = Vector(-4497.569336, 12590.669922, -1883.019409)+POINT_LOWER_2
SPAWN_SCP216_ANGLE = Angle(0, -45.025089, 0.000000)
SPAWN_SCP216HB = Vector(-4497.569336, 12590.669922, -1883.019409)+POINT_LOWER_2
--A table containing all the D Class spawns
SPAWN_CLASSD = {
   V(1961.215698, 11941.300781, -2479.963867)+POINT_LOWER,
V(1969.492310, 12115.597656, -2481.465088)+POINT_LOWER,
V(1932.687134, 11547.925781, -2479.561035)+POINT_LOWER,
V(1938.380737, 11737.603516, -2480.532959)+POINT_LOWER,
V(1108.944580, 10673.421875, -2480.206299)+POINT_LOWER,
V(929.950745, 10662.141602, -2479.660400)+POINT_LOWER,
V(765.571838, 10651.085938, -2479.580566)+POINT_LOWER,
V(532.701721, 10662.491211, -2481.466797)+POINT_LOWER,
V(-369.938477, 11490.011719, -2481.331055)+POINT_LOWER,
V(-361.196167, 11724.223633, -2480.056396)+POINT_LOWER,
V(-370.840515, 11897.085938, -2481.333008)+POINT_LOWER,
V(-362.806274, 12151.232422, -2479.615723)+POINT_LOWER,
V(1952.915771, 12163.376953, -2287.723389)+POINT_LOWER,
V(1957.413818, 11932.448242, -2288.733887)+POINT_LOWER,
V(1942.522339, 11756.041016, -2288.814697)+POINT_LOWER,
V(1982.982788, 11525.749023, -2288.633301)+POINT_LOWER,
V(1124.259766, 10670.971680, -2289.204590)+POINT_LOWER,
V(908.440491, 10647.182617, -2287.468994)+POINT_LOWER,
V(727.071167, 10657.466797, -2289.310547)+POINT_LOWER,
V(510.669067, 10663.972656, -2287.497314)+POINT_LOWER,
V(-327.580200, 11498.846680, -2288.064941)+POINT_LOWER,
V(-357.723877, 11676.424805, -2289.147949)+POINT_LOWER,
V(-378.462128, 11899.834961, -2287.635498)+POINT_LOWER,
V(-366.655029, 12107.348633, -2288.837158)+POINT_LOWER,
V(37.682774, 11125.752930, -2479.711914)+POINT_LOWER,
V(1496.969849, 11049.123047, -2480.198242)+POINT_LOWER,
V(73.981331, 11085.703125, -2287.534912)+POINT_LOWER,
V(1560.697876, 11125.985352, -2287.649658)+POINT_LOWER
}

SPAWN_CLASSE = {
    V(1131.869629, 10480.449219, -2778.529785)+POINT_LOWER,
    V(993.147766, 10480.181641, -2779.709717)+POINT_LOWER,
    V(877.149841, 10479.954102, -2780.421875)+POINT_LOWER,
	V(730.085327, 10479.667969, -2779.781738)+POINT_LOWER,
	V(545.092224, 10479.309570, -2778.503906)+POINT_LOWER,
	V(482.658966, 10711.967773, -2780.464111)+POINT_LOWER,
	V(650.137329, 10712.289063, -2779.168213)+POINT_LOWER,
	V(824.629639, 10712.626953, -2778.558350)+POINT_LOWER,
	V(976.017517, 10712.917969, -2779.675781)+POINT_LOWER
}
--Alt guard spawns, used for some special rounds where
--the gaurds shouldn't be stuffed in a room
SPAWN_GUARD_HALLWAY = {
   V(-2393.358398, -3956.509766, -1756.351074),
V(-2560.377686, -3966.083740, -1755.657837),
V(-2677.900391, -3972.820313, -1754.742676),
V(-2818.805176, -3980.897461, -1754.642822),
V(-2950.976318, -3988.474121, -1755.852417),
V(-3072.950684, -3834.787109, -1755.197021),
V(-2790.056885, -3823.610840, -1770.406006),
V(-2602.888428, -3812.856934, -1864.981323),
V(-2487.101318, -3737.968750, -1882.472168),
V(-2622.613281, -3689.993408, -1883.993164),
V(-2742.913086, -3670.882568, -1884.449585),
V(-2844.663574, -3675.178955, -1883.761475),
V(-2849.519531, -3486.713623, -1882.567139),
V(-3026.378418, -3685.840576, -1884.169922),
V(-3142.927734, -3690.687012, -1883.086182),
V(-3134.103516, -3508.879150, -1883.492188),
V(-3353.776367, -3688.525391, -1882.472534),
V(-3288.010986, -3905.940186, -1884.381958)
}
--Medbay spawns for guards
SPAWN_GUARD = {
   V(-2230.330078, -4191.673828, -1754.637939),
V(-2412.546631, -4200.116211, -1754.575439),
V(-2592.718750, -4208.463867, -1755.320557),
V(-2815.330322, -4218.779785, -1756.293945),
V(-2966.462891, -4225.781250, -1755.096069),
V(-2961.641113, -4406.258789, -1754.784424),
V(-2953.450684, -4583.436035, -1756.255127),
V(-2946.468750, -4734.128906, -1756.232788),
V(-2794.557373, -4914.468750, -1755.157837),
V(-2578.692383, -4900.729980, -1756.382324),
V(-2391.294678, -4892.031738, -1754.790894),
V(-2195.955566, -4864.769043, -1755.385742),
V(-2206.712158, -4632.625977, -1756.379761),
V(-2211.362061, -4532.273926, -1755.583374),
V(-2217.708496, -4395.316406, -1754.620850),
V(-2386.689697, -4713.947754, -1884.323486),
V(-2366.753906, -4394.086914, -1883.081909),
V(-2758.664307, -4378.939941, -1882.719849),
V(-2765.879150, -4751.659668, -1884.468750)
}

SPAWN_OUTSIDE = {
V(-7364.800781, -8844.324219, -1559.968994),
V(-7115.777832, -8819.443359, -1561.936768),
V(-7288.444336, -8627.029297, -1559.968872),
V(-7138.985352, -8450.726563, -1561.781982),
V(-7298.549805, -8276.105469, -1560.503174),
V(-7533.898926, -8441.709961, -1564.499634),
V(-7817.445801, -8611.505859, -1563.225708),
V(-7909.626465, -8986.677734, -1564.843872),
V(-7549.451660, -9235.337891, -1564.968140),
V(-8106.596191, -8317.395508, -1564.891846)
    }
SPAWN_OUTSIDE_RAND = {
	{
V(-7364.800781, -8844.324219, -1559.968994),
V(-7115.777832, -8819.443359, -1561.936768),
V(-7288.444336, -8627.029297, -1559.968872),
V(-7138.985352, -8450.726563, -1561.781982),
V(-7298.549805, -8276.105469, -1560.503174),
V(-7533.898926, -8441.709961, -1564.499634),
V(-7817.445801, -8611.505859, -1563.225708),
V(-7909.626465, -8986.677734, -1564.843872),
V(-7549.451660, -9235.337891, -1564.968140),
V(-8106.596191, -8317.395508, -1564.891846)
    },
    {
V(-7364.800781, -8844.324219, -1559.968994),
V(-7115.777832, -8819.443359, -1561.936768),
V(-7288.444336, -8627.029297, -1559.968872),
V(-7138.985352, -8450.726563, -1561.781982),
V(-7298.549805, -8276.105469, -1560.503174),
V(-7533.898926, -8441.709961, -1564.499634),
V(-7817.445801, -8611.505859, -1563.225708),
V(-7909.626465, -8986.677734, -1564.843872),
V(-7549.451660, -9235.337891, -1564.968140),
V(-8106.596191, -8317.395508, -1564.891846)
    }
}

--Leave this 0
LAST_RDC_TIME = 0
--Sci Spawns
SPAWN_SCIENT = {
   V(-2090.034668, 13913.323242, -1882.881958)+POINT_LOWER,
V(-1677.668335, 13910.043945, -1882.811035)+POINT_LOWER,
V(-1139.284668, 13922.896484, -1883.282959)+POINT_LOWER,
V(-1208.607422, 13365.263672, -1882.845337)+POINT_LOWER,
V(-1275.225830, 12814.214844, -1882.771118)+POINT_LOWER,
V(-2153.133789, 12798.807617, -1883.297974)+POINT_LOWER,
V(-2745.468750, 12797.755859, -1882.653687)+POINT_LOWER,
V(-2924.472168, 12489.254883, -1883.953369)+POINT_LOWER,
V(-3659.782715, 12751.580078, -1883.837280)+POINT_LOWER,
V(-3658.400635, 12330.012695, -1882.504639)+POINT_LOWER,
V(-3997.598633, 12483.594727, -1883.805298)+POINT_LOWER,
V(-4192.310547, 12113.364258, -1884.456055)+POINT_LOWER,
V(-3677.379639, 11652.589844, -1883.092163)+POINT_LOWER,
V(-3246.671143, 11285.913086, -1882.476929)+POINT_LOWER,
V(-2676.071533, 11072.582031, -1883.913086)+POINT_LOWER,
V(-1305.848389, 10793.830078, -1882.468994)+POINT_LOWER,
V(-961.916809, 10567.698242, -1883.867065)+POINT_LOWER,
V(-2933.496582, 13260.539063, -1883.849365)+POINT_LOWER,
V(-3164.684326, 13918.959961, -1884.185425)+POINT_LOWER
}
--Keyguard level 2 spawns
--For every 'zone' that a level two should spawn in, use a subtable
--You can have as many zones as you'd like
SPAWN_KEYCARD2 = {
    lcz1 = {
        V(960.672974, 11884.920898, -2740.210938),
    V(-419.432465, 11638.915039, -2778.659668),
    V(483.449554, 10741.016602, -2780.248779),
    V(1714.130493, 12573.667969, -1884.274536),
    V(750.484802, 13639.613281, -1868.987183),
    V(-1799.281006, 13543.395508, -1883.769043),
    V(-2001.057983, 13175.545898, -1883.472168)
    },
    lcz2 = {
    V(-1776.965942, 13680.368164, -1862.750122),
    V(-1565.127441, 13773.593750, -1918.345703),
    V(-1006.289368, 13679.799805, -1871.349487),
    V(-1110.758545, 10809.693359, -1832.940674),
    V(-3114.248047, 12421.209961, -1868.295410),
    V(-3899.927246, 12534.772461, -1860.122070),
    V(1103.241943, 12378.143555, -2739.041260)
    }
}
--Keyguard level 3 spawns
--For every 'zone' that a level three should spawn in, use a subtable
--You can have as many zones as you'd like
SPAWN_KEYCARD3 = {
	lcz1 = {
        V(885.051697, 12224.927734, -2570.468750),
        V(931.707092, 13646.535156, -1893.397827),
        V(-844.224548, 14145.377930, -1866.893799),
        V(-3388.952393, 14113.561523, -1850.323120),
        V(-3071.645020, 13568.757813, -1896.145630)
    },
    lcz2 = {
        V(-3859.144531, 13053.811523, -1881.007080),
        V(-3829.441895, 11766.074219, -1887.932495),
        V(-3824.649658, 10627.762695, -1864.398315),
        V(-2483.012451, 12415.554688, -1848.677246),
        V(-1249.458618, 10923.837891, -1854.605347)
    },
    hcz = {
        V(-3266.553955, 5854.418457, -2700.574951),
V(-2327.094971, 5800.041992, -3072.643799),
V(82.210518, 5544.882813, -2870.503174),
V(-3285.388184, 4377.197754, -3048.812256),
V(-559.812744, 4965.447266, -3068.319336),
V(-2100.351318, 4037.364258, -2686.759277),
V(981.219116, 3848.791260, -2899.984375),
V(-1893.812378, 4737.663574, -2669.419434)
    }
}
--Keyguard level 4 spawns
--For every 'zone' that a level four should spawn in, use a subtable
--You can have as many zones as you'd like
--Currently one keycard per zone is spawned, this will change
SPAWN_KEYCARD4 = {
	lcz1 = {
		V(-571.598938, 10987.405273, -1821.457886),
		V(-3600.238037, 13022.863281, -1877.261963)
	},
	hcz1 = {
		V(-3852.572998, 5790.031738, -3066.400879),
		V(-1113.263306, 2956.077148, -3359.878174),
		V(-3830.487793, 2818.767578, -3331.444824)
	},
	hcz2 = {
		V(-2761.922607, 2561.125732, -2478.192383),
		V(-3480.847412, 3333.287109, -2674.975098),
		V(-5749.207520, 3946.701904, -2686.187500)
	},
	ez = {
		V(-3809.908691, -1892.865723, -1804.421997),
		V(-2203.151611, -3165.272949, -1870.964722),
		V(-1872.916016, -1649.688721, -1827.784912)
	}
}
--A table containing keycard 5 spawns, 1 or 2 per game depending on player count
--Currently the 2 spawns are placeholders
--This is unused, but will be used soon
SPAWN_KEYCARD5 = {
	V(-4385.515137, 4809.408691, -2702.231934),
	V(-458.031250, 6502.968750, -2656.092285)
}
--Medkits
SPAWN_MEDKITS = {
	V(688.640320, 12326.646484, -2241.144775),
V(1905.220215, 13858.389648, -1868.008301),
V(2333.209229, 13884.714844, -1876.724487),
V(-3933.549072, 13384.188477, -1867.845093),
V(-4186.926270, 12042.684570, -1859.339600),
V(-2470.862549, 12604.065430, -1876.464966),
V(-3177.178711, 10087.350586, -1868.495361),
V(-3183.272705, 10331.098633, -1884.685059),
V(-4240.778809, 4538.700195, -2677.920898),
V(-4249.476074, 4763.243164, -2683.768555),
V(-809.992981, 3128.451416, -2687.210205),
V(-1037.227051, 4994.270508, -3053.627686),
V(-1457.854858, 3614.887939, -3069.732422),
V(-1928.124512, 5121.968262, -3062.410400),
V(-2530.122070, -2107.060791, -1869.278931),
V(-3842.358398, -2736.212891, -1854.977173),
V(-4251.139160, -2948.636230, -1868.136475),
V(-5341.096191, 3378.866211, -2689.885254),
V(603.544067, 4727.842285, -3069.295166),
V(795.056580, 3404.155029, -2875.532959)

}
--Places to spawn items like SNAVs and such
SPAWN_MISCITEMS = {
	V(1145.575073, 10504.800781, -2781.286865),
V(940.979187, 12033.914063, -2261.779785),
V(486.699860, 13007.133789, -1871.547241),
V(2004.698364, 13223.046875, -1860.116821),
V(2152.349854, 13530.992188, -1886.931885),
V(-1219.259888, 14162.538086, -1869.430420),
V(-1948.703369, 13677.297852, -1891.330322),
V(-2158.266113, 13703.131836, -1878.235107),
V(-1785.622314, 13798.195313, -1850.583862),
V(-3526.214355, 13479.037109, -1879.747681),
V(-4407.381348, 12456.772461, -1875.538940),
V(-4108.467285, 12231.036133, -1864.779297),
V(-2377.581543, 11944.147461, -1861.257690),
V(-1015.963684, 10944.518555, -1868.441650),
V(-3215.640625, 10570.072266, -1870.962524),
V(-3943.546631, 11321.986328, -1873.588135),
V(-2482.314453, 14108.853516, -1875.111572),
V(-1843.769897, 13104.263672, -1862.158325),
V(875.397522, 13549.401367, -1883.792725),
V(-1612.290894, 8750.920898, -1867.132446),
V(-3687.902832, 7563.240234, -2696.385986),
V(-3289.448730, 5663.538574, -2695.115234),
V(-4527.517090, 4504.198242, -2700.752686),
V(-4655.416016, 4811.936035, -2677.212158),
V(-4763.648926, 4504.747559, -2726.281738),
V(-5021.576660, 3644.396484, -2668.514648),
V(-5740.258789, 3948.302002, -2668.703613),
V(-5360.752441, 3332.907959, -2673.141357),
V(-5167.732422, 2819.409180, -2688.376709),
V(-3284.081543, 3218.136719, -2672.807129),
V(-2842.560547, 2719.828369, -2620.263428),
V(122.396988, 4303.256836, -2897.083740),
V(951.791077, 5272.921387, -3072.165283),
V(-1588.771240, 4057.600098, -2697.485352),
V(-4632.093750, 4298.453613, -3411.309326),
V(-4647.568359, 3211.132324, -3039.549072),
V(-3254.739990, 4299.546387, -3074.165039),
V(-892.868835, 1727.717407, -3069.876221),
V(-4358.680176, -102.207352, -1864.609619),
V(-4784.698242, -1043.714111, -1869.022339),
V(-4843.483887, -3146.098389, -1870.357300),
V(-4409.386719, -4294.335938, -1924.773926),
V(-2456.015381, -3514.880615, -1839.344482),
V(-383.562500, -1651.798340, -1863.611816),
V(-616.348999, -2898.641357, -1863.419800)
}
--No longer used for just NVG!!!
SPAWN_NVG = {
	V(892.579651, 12292.480469, -2244.678711),
V(-81.990013, 12661.063477, -1880.511719),
V(2036.058716, 13530.914063, -1885.287720),
V(2186.770264, 13525.385742, -1860.663574),
V(1967.884155, 12956.038086, -1884.322388),
V(-278.919250, 13885.412109, -1880.812988),
V(-2163.702881, 13774.305664, -1877.827148),
V(-2080.398438, 14128.475586, -1967.124756),
V(-3195.443848, 13750.176758, -1884.778076),
V(-4189.082520, 13227.602539, -1877.812378),
V(-4475.075195, 12255.748047, -1862.505615),
V(-3066.276855, 11285.279297, -1884.293579),
V(-2549.992676, 11049.032227, -1879.297119),
V(-2007.984131, 12596.559570, -1886.435181),
V(-1234.729126, 12779.564453, -1854.906982),
V(-3130.895264, 12606.428711, -1873.094238),
V(-3229.947998, 10572.179688, -1869.679810),
V(-3556.852295, 10609.172852, -1858.030884),
V(-4150.834473, 10296.857422, -1863.073120),
V(-3727.629639, 9587.904297, -1858.200073),
V(-1606.078857, 7359.158203, -2679.911133),
V(-1597.296753, 7381.250977, -3071.478271),
V(-3079.284424, 5692.836426, -3075.607666),
V(-4339.711914, 5770.140137, -3077.003662),
V(-3453.991455, 3289.068604, -3040.187500),
V(-3733.180176, 3226.737793, -3419.344727),
V(-1202.052856, 4505.547852, -3072.364014),
V(-1910.769897, 4033.471924, -3048.025391),
V(444.340179, 3645.249756, -2896.922852),
V(251.962296, 5201.627441, -3139.561523),
V(-506.914246, 5528.474121, -3046.227539),
V(-1889.401123, 4882.766602, -2676.622559),
V(-2111.190186, 3592.366455, -2679.583740),
V(-2074.983643, 2736.791260, -2680.001709),
V(-5582.277832, 3635.247559, -2667.521240),
V(-5099.681152, 3206.889893, -2694.459229),
V(-4479.400391, 1783.357666, -2691.511719),
V(-880.329346, 6448.346191, -2689.603271),
V(-2768.619141, -2403.109863, -1871.820923),
V(-4643.377930, -3444.933838, -1838.324829),
V(-3019.932617, -3514.651123, -1842.973877),
V(24.995825, -3549.586914, -1930.242432),
V(1244.961670, -3682.943848, -1856.793091),
V(-408.558777, -2247.980957, -1884.325684),
V(-2735.162598, -2204.466553, -1876.046143),
V(-2716.140137, -4738.602539, -1874.017090),
V(-4421.353516, -4567.136230, -1925.912109)
}

SPAWN_BATTERY9 = {

}

SPAWN_BATTERY18 = {

}


SPAWN_BATTERY_STR = {}

--Crowbar spawns, will include other mapspawn melee weapons as they're added
SPAWN_MELEEWEPS = {
V(1758.625977, 12318.719727, -2294.755371),
V(2257.028809, 13004.500977, -1879.799072),
V(-3384.807861, 13321.907227, -1888.016968),
V(-4086.789551, 12250.809570, -1869.701904),
V(-2009.501953, 5472.741211, -2681.388184),
V(-433.289917, 3209.136230, -2678.112061),
V(-3794.594482, 4025.857910, -2685.052002),
V(-5810.893555, 3940.120117, -2667.104004),
V(-3353.558105, 2175.961182, -3061.991699),
V(-4065.925293, 3595.807129, -3437.753662),
V(-4392.408691, -551.020020, -1850.744507),
V(-866.498901, 1730.186035, -3083.941895),
V(951.875061, 3731.764160, -3060.068604),
V(-711.274536, 5278.540527, -3033.077148),
V(-4775.529785, 4506.604980, -2724.083252)
}
--GUN SPAWNS:
--All gun spawns are always used, ie every spawn in the table will have a gun

--That one shotgun by gate b
--More than one will be good

MAP_SHOTGUNS_SUPPORTED = true

SPAWN_SHOTGUNS = {
	V(-4180.482910, -3179.671143, -1883.764893),
V(-4184.864258, -3068.658691, -1882.825562),
V(-4186.968750, -3015.329102, -1882.534180),
V(-4189.072266, -2962.031738, -1882.483154)
}

SPAWN_AMMO_SHOTGUN = {
    V(-4408.867188, -3147.918457, -1918.522217),
V(-4317.080078, -3148.020996, -1919.711914),
V(-4314.982422, -3194.615967, -1920.458130),
V(-4414.297363, -3201.300781, -1918.966919)
}
--Rifle ammo spawns
SPAWN_AMMO_RIFLE = {
	V(-313.226654, -2900.248047, -1910.713623)+POINT_LOWER,
V(-335.726379, -2900.363770, -1910.713623)+POINT_LOWER,
V(-373.225922, -2900.556641, -1910.713623)+POINT_LOWER,
V(-403.225555, -2900.710938, -1910.713623)+POINT_LOWER,
V(-448.225006, -2900.942383, -1910.713623)+POINT_LOWER,
V(-470.724731, -2901.058105, -1910.713623)+POINT_LOWER,
V(-508.224274, -2901.250977, -1910.713623)+POINT_LOWER,
V(-568.223328, -2901.559570, -1910.713623)+POINT_LOWER,
V(-590.722961, -2901.675293, -1910.713623)+POINT_LOWER,
V(-620.722473, -2901.829590, -1910.713623)+POINT_LOWER,
V(-643.222107, -2901.945313, -1910.713623)+POINT_LOWER,
V(-523.224060, -2901.328125, -1910.713623)+POINT_LOWER,
V(-4338.036133, 4809.952637, -2726.596924),
V(-4353.035156, 4809.786621, -2726.596924),
V(-4398.032227, 4809.288574, -2726.596924),
V(-4428.030273, 4808.956543, -2726.596924),
V(-4465.527832, 4808.541504, -2726.596924),
V(-4510.524902, 4808.043457, -2726.596924),
V(-4540.522949, 4807.711426, -2726.596924),
V(-4555.521973, 4807.545410, -2726.596924),
V(-4593.019531, 4807.130371, -2726.596924),
V(-4615.518066, 4806.881348, -2726.596924),
V(-4638.016602, 4806.632324, -2726.596924),
V(-4660.515137, 4806.383301, -2726.596924),
V(-4720.511230, 4805.719238, -2726.596924),
V(-4735.510254, 4805.553223, -2726.596924),
V(-4750.509277, 4805.387207, -2726.596924),
V(-4773.007813, 4805.138184, -2726.596924),
V(-4810.486816, 4804.465332, -2726.596924),
V(-1479.558228, 3579.469971, -3117.970947)+POINT_LOWER,
V(309.968750, 5615.968750, -2914.211670)+POINT_LOWER,
V(-2351.735596, 3964.840332, -3082.600830)+POINT_LOWER,
V(-5017.084473, 3362.296143, -2700.310791)+POINT_LOWER,
V(-2615.964111, 2582.771729, -2528.532959)+POINT_LOWER,
V(-841.016357, 3116.570801, -2698.900879)+POINT_LOWER

}
--SMG ammo spawns
SPAWN_AMMO_SMG = {
	V(-313.363861, -3182.947510, -1908.952393)+POINT_LOWER,
V(-350.863708, -3183.076904, -1908.952393)+POINT_LOWER,
V(-373.363617, -3183.154541, -1908.952393)+POINT_LOWER,
V(-388.363556, -3183.206299, -1908.952393)+POINT_LOWER,
V(-425.863403, -3183.335693, -1908.952393)+POINT_LOWER,
V(-448.363312, -3183.413330, -1908.952393)+POINT_LOWER,
V(-485.863159, -3183.542725, -1908.952393)+POINT_LOWER,
V(-508.363068, -3183.620361, -1908.952393)+POINT_LOWER,
V(-553.362732, -3183.775635, -1908.952393)+POINT_LOWER,
V(-575.862549, -3183.853271, -1908.952393)+POINT_LOWER,
V(-598.362366, -3183.930908, -1908.952393)+POINT_LOWER,
V(-635.862061, -3184.060303, -1908.952393)+POINT_LOWER,
V(-4333.402344, 4511.462891, -2727.490723),
V(-4355.893555, 4510.827148, -2727.490723),
V(-4378.384766, 4510.191406, -2727.490723),
V(-4408.373047, 4509.343750, -2727.490723),
V(-4460.852539, 4507.860352, -2727.490723),
V(-4483.343750, 4507.224609, -2727.490723),
V(-4513.332031, 4506.376953, -2727.490723),
V(-4543.320313, 4505.529297, -2727.490723),
V(-4595.799805, 4504.045898, -2727.490723),
V(-4610.793945, 4503.622070, -2727.490723),
V(-4633.285156, 4502.986328, -2727.490723),
V(-4670.770508, 4501.926758, -2727.490723),
V(-4723.250000, 4500.443359, -2727.490723),
V(-4760.735352, 4499.383789, -2727.490723),
V(-4775.729492, 4498.959961, -2727.490723),
V(-4805.717773, 4498.112305, -2727.490723),
V(-3115.416504, 4995.801758, -3083.386475)+POINT_LOWER,
V(-2473.239258, 4191.096191, -2700.468750)+POINT_LOWER
}
--Pistol ammo
SPAWN_AMMO_PISTOL = {
V(2196.532959, 13538.274414, -1911.431030),
V(2166.533936, 13538.481445, -1911.431030),
V(2144.034668, 13538.636719, -1911.431030),
V(2121.535400, 13538.791992, -1911.431030),
V(2076.536865, 13539.102539, -1911.431030),
V(2054.037598, 13539.257813, -1911.431030),
V(2031.537964, 13539.413086, -1911.431030),
V(1994.038574, 13539.671875, -1911.431030),
V(1991.899902, 13227.087891, -1911.653809),
V(2021.894531, 13226.517578, -1911.653809),
V(2059.387695, 13225.804688, -1911.653809),
V(2074.384766, 13225.519531, -1911.653809),
V(2119.375977, 13224.664063, -1911.653809),
V(2149.370117, 13224.093750, -1911.653809),
V(2171.865723, 13223.666016, -1911.653809),
V(2209.358398, 13222.953125, -1911.653809),
V(-3189.687500, 10031.575195, -1882.547485),
V(-4172.089355, 13443.634766, -1928.699341),
V(-1954.321655, 12528.834961, -1937.276367),
V(-1955.083008, 12581.328125, -1937.276367),
V(-1955.626831, 12618.823242, -1937.276367)
}
--Pistols
SPAWN_PISTOLS = {
    V(2183.880859, 13432.349609, -1884.967041),
V(2184.201660, 13376.816406, -1884.867065),
V(2184.584961, 13310.438477, -1884.433228),
V(2073.215576, 13309.064453, -1883.497803),
V(2072.808105, 13375.992188, -1883.063843),
V(2072.422119, 13442.941406, -1883.006836),
V(-2043.448242, 12456.147461, -1882.486572),
V(-2367.556396, 12456.751953, -1882.541504),
V(-4226.598633, 13424.831055, -1883.059937),
V(-3265.229980, 10051.573242, -1883.231079)
}
--SMGs
SPAWN_SMGS = {
	V(-4332.837402, 4546.429688, -2700.238525),
V(-4398.212891, 4546.967773, -2699.759277),
V(-4487.930664, 4547.703125, -2698.877197),
V(-4543.259277, 4548.157715, -2698.572754),
V(-4610.366699, 4548.708496, -2698.490723),
V(-4655.181641, 4549.077637, -2698.671143),
V(-4736.187012, 4549.742676, -2699.909180),
V(-4801.439941, 4550.277344, -2700.326660),
V(-620.441162, -3143.448242, -1884.392334),
V(-576.003418, -3144.421387, -1884.191040),
V(-487.593323, -3146.357422, -1883.447388),
V(-442.704895, -3147.341309, -1882.469116),
V(-393.469391, -3129.467529, -1883.528198),
V(-336.982941, -3130.453857, -1883.806519),
V(-3075.727051, 4998.132324, -3082.266846),
V(-2535.661133, 4192.749023, -2700.427002)

}
--Rifles, like aks
SPAWN_RIFLES = {
V(-629.757446, -2944.596924, -1919.998535),
V(-576.444214, -2943.973633, -1920.454956),
V(-515.610229, -2943.261719, -1919.839233),
V(-462.174591, -2942.637207, -1918.997925),
V(-395.238220, -2941.855225, -1918.471558),
V(-314.984467, -2940.916504, -1919.105469),
V(-4356.115723, 4777.265625, -2735.149170),
V(-4408.984863, 4777.648438, -2735.958984),
V(-4488.902344, 4777.798828, -2736.450195),
V(-4536.696777, 4777.453125, -2734.521484),
V(-4596.893555, 4777.798828, -2734.641357),
V(-4663.687500, 4777.798828, -2735.603516),
V(-4743.959961, 4777.802246, -2736.453613),
V(-4803.831055, 4777.802246, -2736.137939),
V(-2354.653076, 3918.296143, -3097.561768),
V(-777.915894, 3129.524170, -2698.749268),
V(243.184265, 5594.731934, -2916.711914),
V(-1477.485229, 3640.548340, -3094.035889),
V(-5066.790039, 3385.127441, -2711.459717),
V(-2673.761230, 2564.401855, -2537.471680)
}

SPAWN_SNIPERS = {
	V(219.923645, 11859.000000, -2629.826172)
}
--Unused, won't ever be used
--Kept to stop GM from complaining
SPAWN_ZOMBIES = {
}

--Would be locations for a 096 nextbot to spawn
SPAWN_096NEXT = {

}

--The direction the nextbot would point
SCP096_ANGLES = {

}


--MTF Guard vests, all spawns are used
SPAWN_ARMORS = {
    V(-4307.968750, 4505.883789, -2700.350342)+POINT_LOWER,
V(-4204.031250, 4505.846680, -2699.616699)+POINT_LOWER,
V(-4204.031250, 4809.798828, -2699.527588)+POINT_LOWER,
V(-4307.968750, 4809.798828, -2698.629883)+POINT_LOWER,
V(-297.171875, -2974.883789, -1919.217407),
V(-297.649719, -3041.820557, -1920.176758),
V(-298.272369, -3129.011719, -1919.468750),
V(809.463806, 12382.768555, -2266.468750)+POINT_LOWER,
V(-2520.968750, 12648.787109, -1884.459961)+POINT_LOWER
}
--Fire proof vests, all spawns are used
SPAWN_FIREPROOFARMOR = {
	V(-2134.968750, 13677.031250, -1883.942383)+POINT_LOWER,
V(-3053.031250, 13006.831055, -1882.489502)+POINT_LOWER,
V(-4240.968750, 13186.831055, -1884.658569)+POINT_LOWER,
V(-286.968750, -1634.031250, -1884.133545)+POINT_LOWER
}
--Flash nades, all spawns are used
SPAWN_FLASH = {
   V(-305.582306, -2973.257080, -1892.304688),
V(572.809753, 11315.998047, -2481.366211),
V(1511.263916, 11558.440430, -2780.171387),
V(1499.351563, 12327.710938, -2779.355957),
V(682.254333, 12781.702148, -2780.646973),
V(193.690353, 12436.729492, -2779.962402),
V(580.043274, 11988.375000, -2780.968750),
V(487.093872, 11336.383789, -2779.228271),
V(1594.265991, 13253.439453, -1884.966797),
V(2215.792725, 13090.269531, -1883.590698),
V(2174.750977, 13577.231445, -1883.863647),
V(2275.959717, 13519.461914, -1884.743286),
V(2321.151611, 13297.236328, -1882.972290),
V(-157.197113, 14065.133789, -1845.142334),
V(-1666.161133, 14314.393555, -1961.554077),
V(-1776.178345, 13752.934570, -1878.611816),
V(-2665.270264, 13916.611328, -1868.262817),
V(-3202.676514, 13344.513672, -1872.946777),
V(-4438.388672, 12461.403320, -1873.810303),
V(-4438.388672, 12461.403320, -1872.644287),
V(-4099.636719, 12190.596680, -1886.715088),
V(-3754.051025, 10190.519531, -1880.953247),
V(-1810.429443, 10185.997070, -1877.033447),
V(-744.195007, 10921.184570, -1891.012451),
V(-1660.198486, 8016.995117, -1861.147339),
V(-3651.175049, 7926.535645, -2678.083984),
V(-3459.418701, 5106.847168, -2705.377441),
V(-4742.974609, 4665.854492, -2698.438965),
V(-5285.266602, 4142.887695, -2680.586914),
V(-5865.819824, 3758.757080, -2696.248779),
V(-4549.073730, 2248.792969, -2680.873047),
V(-3345.848633, 3216.511963, -2673.423096),
V(-2357.131836, 3082.850586, -2644.468994),
V(-782.406067, 3635.766113, -2690.601563),
V(-1963.317139, 3860.432861, -2761.366699),
V(-2022.353760, 5033.270020, -2705.883301),
V(-1325.500732, 5656.887207, -3058.039551),
V(-423.150787, 5935.922363, -2700.505859),
V(-1029.701660, 5372.663574, -3064.549805),
V(801.093079, 5560.058105, -2898.950195),
V(706.036926, 4584.576172, -3085.028076),
V(24.845921, 4436.041504, -3066.896973),
V(-645.128967, 4010.561523, -3389.631348),
V(-773.181213, 4506.617676, -3073.740234),
V(-2871.001953, 3815.590576, -3094.785156),
V(-2509.738281, 6397.441895, -2690.103516),
V(-4502.772461, 1624.113647, -2688.369873),
V(-687.083618, 1734.845093, -3085.965332),
V(-718.308411, 254.558945, -1879.289063),
V(-966.705933, -1116.462402, -1853.480713),
V(-1291.247314, -2134.343262, -1873.847290),
V(-1783.541870, -2989.682861, -1873.775269),
V(-2319.058838, -3085.767334, -1881.231201),
V(-3395.371826, -3521.559814, -1857.729858),
V(-4201.127930, -4658.174805, -1920.705566),
V(-4389.114746, -53.439041, -1878.276611),
V(-3973.595947, 4086.204834, -3424.382813),
V(-3434.645020, 3876.592041, -3058.302490),
V(-4167.064941, 5588.045410, -3077.770264),
V(-2473.649414, 5087.312988, -3082.200928),
V(-1117.307495, 6315.081543, -2695.103271)
}
--Pills, all spawns are used
SPAWN_500 = {
V(1934.060791, 12855.198242, -1884.899414),
V(2078.850342, 12855.648438, -1884.557739),
V(2283.057617, 12856.284180, -1882.990356),
V(-4778.833984, 4605.767090, -2734.838867),
V(-4778.459473, 4659.212891, -2734.472168),
V(-4778.039063, 4719.402832, -2734.807617),
V(-3847.447754, 5581.576660, -3084.468262),
V(-4016.160645, 3685.107422, -3301.470703),
V(-3239.855713, 4294.468750, -3082.780029),
V(-5848.665039, 3941.832275, -2700.290527),
V(-983.683777, 3604.738037, -3082.078369),
V(-407.756042, 6423.704102, -2699.069092),
V(-2099.778076, -1756.568481, -1854.815552),
V(-2100.680420, -1650.892090, -1855.921631),
V(-4371.667969, -2914.949219, -1918.595581),
V(-4243.970215, -2914.964355, -1920.198730)
}
--This was used back when chaos didn't spawn with MTF guards
--Feel free to add spawns for it, just know they probably won't ever be used
--(Use in Special round?)
SPAWN_CHAOS_S = SPAWN_GUARD_HALLWAY

--Hack to fix 914
--You can have a command call this, or stick it in your breach mapconfig using timers, delay should be around 15 seconds
function Fix914()
end

--Compatibility
ALPHA_WARHEAD_SUPPORTED_BY_MAP = false
--Var, off
ALPHA_WARHEAD_STATE = false
local NEXT_914_USE = 0
--THESE ARE MAP BUTTONS
--They are one of the most important things in this config
--Buttons should be accurate or they won't work
--This is where you set keycard requirements and door names
--Every 'door' is a subtable of BUTTONS
--You can have the following attributes on each door

--name (required) - Shown to the user when they use the door, set to an empty string to not Show
--pos (required) - The position of the button
--canactivate - A function thats called to determine if a player can use the button/ent, takes 2 arguments, the player and the ent
--usesounds - true or false value, whether or not the siren should play upon the door being used, false if not present
--clevel - The min. keycard level to use, this probably doesn't work well with canactivate
--customdenymsg - Shown to the user if it is determined they cannot use this door in canactivate (function), usually used to tell players trying to leave their spawn they can't yet during prep
--enabled - Not really sure, haven't played around with it, assuming its whether a door can be used

local function WaitUntilStart()
	return !preparing
end

local function DenyUse()
	return false
end

local function Checkpoint(ply)
	return !preparing and IsValid(ply) and (ply:Team() == TEAM_SCP or ply:CLevelGlobal() >= 3)
end

BUTTONS = {
	{
		name = "914 Button",
		pos = POS_914BUTTON,
		customdenymsg = "",
		canactivate = function(pl, ent)
			if NEXT_914_USE > CurTime() then return false end
			NEXT_914_USE = CurTime() + 15
			Use914(ent)
			return false
		end
	},
	--If the map doesn't have 914
	--Move the 'return false' to before 'Use914B(pl, ent)'
	{
		name = "914 Button 2",
		pos = POS_914B_BUTTON,
		customdenymsg = "",
		canactivate = function(pl, ent)
			Use914B(pl, ent)
			return false
		end
	},
	{
		name = "Gate A",
		pos = V(-4697.009766, -4963.100098, -1894.500000),
		clevel = 4
	},
	{
		name = "Remote Door Control",
		pos = V(-515.979980, -3880.010010, -571.140015),
		canactivate = function(pl, ent)
			if LAST_RDC_TIME + 4 > CurTime() then
				pl:PrintMessage(HUD_PRINTTALK, "You have to wait before you can use this again")
				return false
			end
			LAST_RDC_TIME = CurTime()
			if rdc_state then
				rdc_state = false
			else
				rdc_state = true
			end
			return true

		end,
		enabled = true
	},
	{
		name = "Gate B",
		pos = V(415.109985, -3831.169922, -1894.500000),
		clevel = 4
	},
	{
		name = "173 Control Room Doors",
		pos = V(-1438.989990, 14018.799805, -1895.250000),
		canactivate = function(pl, ent) return !preparing end,
		clevel = 2
	},
	{
		name = "SCP-173 Spawn Doors",
        pos = V(-1060.000000, 14157.799805, -1912.079956),
        canactivate = function ()
            return false
        end,
        customdenymessage = ""
	},
	{
		name = "Light Control",
        pos = V(-2578.000000, -4822.000000, -1776.880005),
        canactivate = function ()
            return false
        end,
        customdenymessage = ""
	},
	{
		name = "Lockdown",
        pos = V(-445.179993, -2100.000000, -1893.250000),
        canactivate = function ()
            return false
        end,
        customdenymessage = ""
	},
	{
		name = "Primary Lighting",
        pos = V(47.000000, -1669.010010, -1889.640015),
        canactivate = function ()
            return false
        end,
        customdenymessage = ""
	},
	{
		name = "Warhead",
        pos = V(-377.500000, 6224.000000, -2693.500000),
        canactivate = function ()
            return false
        end,
        customdenymessage = ""
	},
	{
		name = "SCP-106 Containment",
		pos = V(-4268.000000, 3714.010010, -3329.250000),
		canactivate = WaitUntilStart,
		customdenymsg = "Please wait until the round starts."
	},
	{
		name = "SCP-049 Containment",
		pos = V(-4982.500000, 3560.830078, -2727.370117),
		canactivate = WaitUntilStart,
		customdenymsg = "Please wait until the round starts."
	},
	{
		name = "SCP-457 Containment",
		pos = V(-3789.000000, 13450.299805, -1897.500000),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-457 Containment",
		pos = Vector(-3072.000000, 13361.799805, -1902.630005),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-372 Containment",
		pos = Vector(-2033.489990, 5602.830078, -3086.000000),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-939 Containment",
		pos = Vector(2140.810059, 672.000000, -1816.560059),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-1048 Containment",
		pos = Vector(-2640.000000, 5254.330078, -3086.000000),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-WW Containment",
		pos = Vector(529.510010, 5406.899902, -2941.070068),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-682 Containment",
		pos = Vector(-995.510010, 3631.000000, -3415.070068),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-066 Containment",
		pos = Vector(-2408.489990, 5602.830078, -3086.000000),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-096 Containment",
		pos = Vector(-3326.000000, 3627.830078, -2710.290039),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-076-2 Containment",
		pos = Vector(-642.729980, 4878.709961, -3094.840088),
		canactivate = WaitUntilStart,
		customdenymsg = "Please wait until the round starts."
	},
	{
		name = "SCP-966 Containment",
		pos = Vector(-3393.989990, 5495.839844, -2711.250000),
		canactivate = WaitUntilStart
	},
	{
		name = "SCP-017 Containment",
		pos = Vector(-2265.000000, 5254.330078, -3086.000000),
		canactivate = WaitUntilStart
	},
	{
		name = "Class E Showers",
		pos = Vector(807.010010, 10791.000000, -2791.250000),
		canactivate = WaitUntilStart
	},
	{
		name = "Checkpoint LCZ1",
		pos = Vector(-1691.000000, 9981.599609, -1890.540039),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP or ply:GetNClass() == ROLE_UNI or ply:GetNClass() == ROLE_CONF then
					return true
				end
				return false
		end,
		usesounds = true,
		customdenymsg = "Level 3 Access Required"
	},
	{
		name = "Checkpoint LCZ2",
		pos = Vector(-3633.000000, 7000.569824, -2706.540039),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP or ply:GetNClass() == ROLE_UNI or ply:GetNClass() == ROLE_CONF then
					return true
				end
				return false
		end,
		usesounds = true,
		customdenymsg = "Level 3 Access Required"
	},
	{
		name = "Checkpoint HCZ1",
		pos = Vector(-775.000000, -878.429993, -1890.540039),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP or ply:GetNClass() == ROLE_UNI or ply:GetNClass() == ROLE_CONF then
					return true
				end
				return false
		end,
		usesounds = true,
		customdenymsg = "Level 3 Access Required"
	},
	{
		name = "Checkpoint HCZ2",
		pos = Vector(-4559.000000, -310.429993, -1890.540039),
		canactivate = function (ply)
				if ply:CLevel() > 2 or ply:Team() == TEAM_SCP or ply:GetNClass() == ROLE_UNI or ply:GetNClass() == ROLE_CONF then
					return true
				end
				return false
		end,
		usesounds = true,
		customdenymsg = "Level 3 Access Required"
	},
	{
		name = "SCP-1162",
		pos = Vector(-3313.989990, 14042.799805, -1895.250000),
		clevel = 2
	},
	{
		name = "LCZ Armory",
		pos = Vector(1835.089966, 13376.000000, -1895.250000),
		clevel = 4
	},
	{
		name = "HCZ Armory",
		pos = Vector(-4180.000000, 4657.830078, -2711.250000),
		clevel = 4
	},
	{
		name = "SCP Closet",
		pos = Vector(-3767.000000, 11576.000000, -1895.750000),
		clevel = 2
	},
	{
		name = "Shooting Range",
		pos = Vector(-2139.989990, 12684.799805, -1895.250000),
		clevel = 3
	},
	{
		name = "SCP-038",
		pos = Vector(-1993.000000, 2937.830078, -2711.250000),
		clevel = 4
	},
	{
		name = "Security Center",
		pos = Vector(-2732.000000, -4092.669922, -1765.939941),
		canactivate = WaitUntilStart,
		customdenymsg = "Please wait until the round starts."
	},
	{
		name = "Warhead Silo",
		pos = Vector(-1213.989990, 6203.000000, -2711.250000),
		clevel = 4
	},
	{
		name = "Shotgun Armory",
		pos = Vector(-4449.000000, -3047.000000, -1895.250000),
		clevel = 3
	},
	{
		name = "Electrical Center",
		pos = Vector(-457.000000, -2407.000000, -1895.250000),
		clevel = 4
	},
	{
		name = "Supply Closet",
		pos = Vector(-5670.000000, 3861.010010, -2711.250000),
		clevel = 3
	},
	{
		name = "Supply Closet",
		pos = Vector(-3342.000000, 4330.000000, -3095.250000),
		clevel = 3
	},
	{
		name = "SCP-079 Containment",
		pos = Vector(-2002.000000, 6200.830078, -2711.250000),
		clevel = 5
	}
}

--Escape Zone
POS_GATEA = Vector(-7784.456543, -1808.260132, -1305.409790)
--The center of the escort zone
POS_ESCORT = Vector(-4566.164063, -5899.991699, -1890.493530)
--The button used to open the gate
POS_GATEABUTTON = Vector(-4697.009766, -4963.100098, -1894.500000)
--The button used to open 173's room
POS_173DOORS = Vector(-1060.000000, 14157.799805, -1912.079956)
--Maybe works?
POS_106DOORS = Vector(0, 0, 0)
--Doesn't work due to the way the map works
POS_049BUTTON = Vector(0, 0, 0)
--Same as 173DOORS
POS_173BUTTON = POS_173DOORS
--Used to open 096's zone
POS_096BUTTON = Vector(0, 0, 0)
--This line is fine
POS_096_1BTN = POS_096BUTTON
--Not even sure what thats used for
POS_682BUTTON = Vector(0, 0, 0)
--This is probably unused
POS_BTN1048A1 = Vector(0, 0, 0)
--Unused?
POS_BTN1048A2 = Vector(0, 0, 0)
--Was used to open 966's old spawn, map broke it
POS_BTN966 = Vector(0, 0, 0)
--new one
POS_BTN966_2 = Vector(0, 0, 0)
--Pocket dem locations
POS_POCKETD = {
	Vector(-7811.894531, 9093.808594, -751.949097),
	Vector(-7620.160156, 9146.787109, -750.203369),
	Vector(-7557.487793, 8837.836914, -750.436951),
	Vector(-7870.822754, 8846.282227, -750.983765),
	Vector(-7704.706543, 8979.778320, -751.201477)
}

--Called when a player requests gate a
--Use an empty function for maps without gates
local function Breach_RequestGateA(ply)
	print("map: gate a requested")
	if preparing or postround then return end
	if ply:CLevelGlobal() < 4 then return end
	if !(ply:Team() == TEAM_GUARD or ply:Team() == TEAM_CHAOS or ply:Team() == TEAM_GOC) then return end
	if nextgateaopen > CurTime() then
		ply:PrintMessage(HUD_PRINTTALK, "You cannot open Gate A now, you must wait " .. math.Round(nextgateaopen - CurTime()) .. " seconds")
		return
	end
	local gatea
	if SetRDCState then
		SetRDCState(false)
	end
	for id,ent in pairs(ents.FindByClass("func_button")) do
		for k,v in pairs(MAPBUTTONS) do
			if v["pos"] == ent:GetPos() then
				if v["name"] == "Gate A" then
					gatea = ent
				end
			end
		end
	end
	if IsValid(gatea) then
		nextgateaopen = CurTime() + 60
		timer.Simple(2, function()
			if IsValid(gatea) then
				gatea:Fire("unlock")
				gatea:Use(ply, ply, USE_ON, 1)
			end
		end)
	end
end

hook.Add("BreachMap_RequestGateA","Breach_gmsite19_requestGateA", Breach_RequestGateA)

--Sets the RDC's state, does nothing if already in the desired state
local function Breach_SetRDCState(desired)
	print("map: set rdc state "..tostring(desired))
	if rdc_state == desired then
		return
	end
	if rdc_state then
		rdc_state = false
		local rdc
		for id,ent in pairs(ents.FindByClass("func_rot_button")) do
			for k,v in pairs(MAPBUTTONS) do
				if v["pos"] == ent:GetPos() then
					if v["name"] == "Remote Door Control" then
						rdc = ent
						ForceUse(rdc, 1, 1)
					end
				end
			end
		end
	else
		rdc_state = true
		local rdc
		for id,ent in pairs(ents.FindByClass("func_rot_button")) do
			for k,v in pairs(MAPBUTTONS) do
				if v["pos"] == ent:GetPos() then
					if v["name"] == "Remote Door Control" then
						rdc = ent
						ForceUse(rdc, 1, 1)
					end
				end
			end
		end
	end
end
hook.Add("BreachMap_SetRDCState", "Breach_site19_desiredRDC", Breach_SetRDCState)

--This function toggles if gate a is open or not
--This is probably unused, but I ported it just in case
local function Breach_ToggleGateA()
	print("map: toggle gate a")
	SetRDCState(false)
	for k, v in pairs( ents.FindByClass( "func_rot_button" ) ) do
		if v:GetPos() == POS_GATEABUTTON then
			ForceUse(v, USE_ON, 1)
		end
	end
end

hook.Add("BreachMap_ToggleGateA", "Breach_site19_ToggleMainGate", Breach_ToggleGateA)

--Function used in the gamemode to close SCP doors
--Some of this is probably broken on the default map
--Potientally unused
local function Breach_CloseSCPDoors()
	print("map: close scp doors")
	//WARNING! KANADE CODE BELOW, YOU MIGHT KILL YOURSELF AFTER READING IT
	for k,v in pairs( ents.FindByClass( "func_door" ) ) do
		// 173 doors
		if v:GetPos() == POS_173DOORS then
			ForceUse(v, 0, 1)
		end
		// 106 doors
		if v:GetPos() == POS_106DOORS then
			ForceUse(v, 0, 1)
		end
		// 049 doors
		if v:GetPos() == POS_049BUTTON then
			ForceUse(v, 0, 1)
		end

		if v:GetPos() == Vector(5040.000000, -2376.000000, 54.000000) then
			ForceUse(v, 0, 1)
		end
	end
	for k,v in pairs( ents.FindByClass( "func_button" ) ) do
		if v:GetPos() == POS_173BUTTON then
			ForceUse(v, 1, 1)
		end
		if v:GetPos() == POS_049BUTTON then
			ForceUse(v, 1, 1)
		end
	end
	-- Open 096 Doors
	for k, v in pairs( ents.FindByClass( "func_button" ) ) do
		if v:GetPos() == POS_096_1BTN then
			ForceUse(v, 1, 1)
		end
		--if v:GetPos() == POS_096_2BTN then
		--	ForceUse(v, 1, 1)
		--end
	end
end
hook.Add("BreachMap_CloseSCPDoors", "Breach_site19_CloseDoors", Breach_CloseSCPDoors)

--Function used to release SCPs at the start of the round
local function Breach_OpenSCPDoors()
	print("map: open scp doors")
	//WARNING KANADE CODE BELOW, THIS MAY HAVE ADVERSE HEALTH EFFECTS
	for k, v in pairs( ents.FindByClass( "func_door" ) ) do
		--SCP-173
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-1060.000000, 14157.799805, -1912.079956) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-106
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-4268.000000, 3714.010010, -3329.250000) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-049
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-4982.500000, 3560.830078, -2727.370117) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-457 or SCP-334
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-3072.000000, 13361.799805, -1902.630005) or v:GetPos() == Vector(-3643.000000, 13309.799805, -1895.250000) or v:GetPos() == Vector(-3789.000000, 13450.299805, -1897.500000) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-096 or SCP-3199
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-3326.000000, 3627.830078, -2710.290039) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-011 or SCP-2845
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-3015.000000, 5254.330078, -3086.000000) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-017 or SCP-3331
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-2265.000000, 5254.330078, -3086.000000) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-066 or SCP-689
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-2408.489990, 5602.830078, -3086.000000) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-372
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-2033.489990, 5602.830078, -3086.000000) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-682
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-995.510010, 3631.000000, -3415.070068) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-939
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(529.489990, 3600.100098, -2941.070068) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-WW
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(529.510010, 5406.899902, -2941.070068) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
		--SCP-1048
	for k,v in pairs(ents.FindByClass("func_button")) do
		if v:GetPos() == Vector(-2640.000000, 5254.330078, -3086.000000) then
			v:Fire("unlock")
			v:Fire("use")
		end
	end
	--Remove 966 door
	for k,v in pairs(ents.GetAll()) do
		if v:GetClass() == "prop_dynamic" and v:GetPos() == Vector(4291.740234, 2367.010010, 55.498001) then
			SafeRemoveEntity(v)
		end
		if v:GetClass() == "func_door_rotating" and v:GetPos() == Vector(4292.000000, 2337.000000, 46.000000) then
			SafeRemoveEntity(v)
		end
	end
	-- Open 096 Doors
	for k, v in pairs( ents.FindByClass( "func_button" ) ) do
		if v:GetPos() == POS_096_1BTN then
			ForceUse(v, 1, 1)
		end
		--if v:GetPos() == POS_BTN1048A1 then
		--	ForceUse(v, 1, 1)
		--end
		if v:GetPos() == POS_BTN966 then
			v:Fire("Use")
		end
		if v:GetPos() == POS_BTN966_2 then
			v:Fire("Use")
		end
		--if v:GetPos() == POS_096_2BTN then
		--	ForceUse(v, 1, 1)
		--end
	end
	end

end
hook.Add("BreachMap_OpenSCPDoors", "Breach_site19_OpenDoors", Breach_OpenSCPDoors)


--Called right after we reset the map, this is called every round
--Called right when preparing starts, before any players / entities are spawned
--Use this if a map needs some things disabled or something
--Also can be used to clean map ents
local function Breach_PostMapCleanup()
	print("map: round init post clean")
	--Var, off
	ALPHA_WARHEAD_STATE = false
	for k,ent in pairs(ents.GetAll()) do
		if ent:GetPos() == Vector(3972.000000, 264.000000, -330.140015) then
			ent:Fire("unlock")
			ent:Fire("pressin")
			ent:Fire("lock")
		end
	end
	local REMOVE_MODELS = {
		"models/props/cs_office/fire_extinguisher.mdl",
		"models/props_c17/hospital_shelf01.mdl",
		"models/props/hospital_ivstand01.mdl",
		"models/props_junk/watermelon01.mdl"
	}

	for k,v in pairs(REMOVE_MODELS) do
		for _,x in pairs(ents.FindByModel( v )) do
			print("Cleaned up model " .. v)
			x:Remove()

		end
	end
end

hook.Add("PostCleanupMap", "BreachMap_site19_mapcleaned", Breach_PostMapCleanup)

TIMED_GATE_SUPPORTED_MAP = true

hook.Add("FOpenGateA", "BreachMap_site19_gateaopenforced", function ()
	if hideseekrespawn then return end
	for k, v in pairs( ents.FindByClass( "func_door" ) ) do
		if v:GetName() == "gate_containment_door_l" or v:GetName() == "gate_containment_door_r" then
			v:Fire("Open")
		end
	end
end)

hook.Add("OpenGateB", "BreachMap_site19_gatebopen", function ()
	for k, v in pairs( ents.FindByClass( "func_door" ) ) do
		if v:GetName() == "gate_b_door_l1" or v:GetName() == "gate_b_door_r1" then
			v:Fire("Open")
		end
	end
end)


local function Breach_PreventPickup(ply, ent)
	if IsValid(ent) and ent.MAP_PREVENT_PICKUP then
		return false
	end
end

hook.Add("AllowPlayerPickup", "AllowPlayerPickup_Site05_StopPickup", Breach_PreventPickup)